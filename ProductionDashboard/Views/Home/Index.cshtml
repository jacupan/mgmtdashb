@{
    ViewBag.Title = "Dashboard Page";
}

@using GatePassApplication.Classes

<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title - Production Dashboard</title>
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Font-Awesome/css/font-awesome.css")" rel="stylesheet" type="text/css" />


    <style type="text/css">

        .spinner {
            position: fixed;
            top: 50%;
            left: 62%;
            margin-left: -62px; /* half width of the spinner gif */
            margin-top: -50px; /* half height of the spinner gif */
            text-align:center;
            z-index:1234;
            overflow: auto;
            width: 100px; /* width of the spinner gif */
            height: 102px; /*hight of the spinner gif +2px to fix IE8 issue */   
        }

        .k-grid td
        {
           /* padding-left: 0.3em;
            padding-right: 0.3em;
            padding-top: 0;
            padding-bottom: 0; */

            padding:  0.5em;
        }
        
        #gridTestYield .k-pager-wrap
        {
          display: none;

        }

         #gridTestOutput .k-pager-wrap
        {
          display: none;

        }

        
         #gridTestOutputChild .k-pager-wrap
        {
          display: none;

        }

        .responsive-container {
            position: relative;
            width: 100%;
            height: 100%;
            border: 0px solid black;
            overflow:hidden;
        }

        .dummy {
            padding-top: 100%; /* forces 1:1 aspect ratio */
        }

        .img-container {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
    
            text-align:center; /* Align center inline elements */
            font: 0/0 a;
        }

        .img-container .centerer {
            display: inline-block;
            vertical-align: middle;
            height: 100%;
        }

        .img-container img {
            vertical-align: middle;
            display: inline-block;
            max-height: 100%;  /* <-- Set maximum height to 100% of its parent */
            max-width: 100%;   /* <-- Set maximum width to 100% of its parent */
        }


        .mainpage {            
            overflow:hidden;            
            padding-top: 12px; 
            padding-left: 8px; 
            padding-bottom: 0px; 
            padding-right: 8px;
            border: 0px solid;
        }
        
        /* Display Font Awsome Icons and Fonts in treeview */
        .fa.k-sprite,
        .fa.k-sprite::before {
            font-size: 14px;
            line-height: 14px;
            vertical-align: middle;
        }
    
        
        .k-header h1 {
            margin: 0;
            padding: 30px 15px;
            font-size: 32px;
            font-weight: lighter;
        }

        /* Sticky footer styles
    -------------------------------------------------- */
        html {
            position: relative;
            min-height: 100%;
        }
@*
        body {
            /* Margin bottom by footer height */            
            margin-bottom: 10px;            
        }*@

        .footer {
            position: absolute;
            bottom: 0;
            width: 100%;
            /* Set the fixed height of the footer here */
            height: 60px;
            background-color: #f5f5f5;
        }

        .container-fluid .text-muted {
            margin: 20px 0;
        }

        .placeholders {
            margin: 30px auto;
        }

        .placeholder img {
            display: inline-block;
        }

        p .k-button {
            margin: 0 15px 0 0;
        }
        .btn-toggle {
            position: absolute;
            top: 0;
            left: 0;
            box-shadow: none;
            height: 48px;
        }

        .btn-toggle .k-icon {
            opacity: 1;
        }

        .btn-toggle,
        .k-primary.btn-toggle:hover,
        .btn-toggle:focus:active:not(.k-state-disabled):not([disabled]),
        .btn-toggle:focus:not(.k-state-disabled):not([disabled]) {
            box-shadow: none;
            border-radius: 0;
        }

        .btn-toggle .k-i-hbars,
        .k-primary.btn-toggle:hover .k-i-hbars,
        .btn-toggle:focus:active:not(.k-state-disabled):not([disabled]) .k-i-hbars,
        .btn-toggle:focus:not(.k-state-disabled):not([disabled]) .k-i-hbars {
            background-position: -80px -32px;
        }
        @@media (max-width: 768px) 
        {
          .k-item {
            display: block;
            clear: both;
            float: none;
            width: 100%;
          }

          .k-header h1 {
            margin: 0;
            padding: 16px 15px 14px 60px;
            font-size: 18px;
            font-weight: lighter;
            
           }  
           
         
        }

       

    </style>
    
      <script type="text/javascript">
        function additionalInfo() {
            return {

                fYrWk: $("#fYrWk").val(),

                classification: $("#Classification").val().trim(),

                fYrMo: $("#fYrMo").val().trim().toLowerCase(),

                groupings: $("#Groupings").val().trim(),

                wipInv: $("#WipInv").val().trim()

            }
        }

        function removeOutsCol() {

            this.hideColumn("FYrMo");
            this.hideColumn("OpGroups");
            this.hideColumn("Groupings");
        }

        function removeGroupsChild() {

            this.hideColumn("Groupings");
            this.hideColumn("OpGroups");

        }

        function removeOutsClassCol() {

            this.hideColumn("FYrMo");
            this.hideColumn("OpClass");
            this.hideColumn("Classification");
        }

        function removeClassChild() {

            this.hideColumn("FYrMo");
            this.hideColumn("OpClass");
            this.hideColumn("Classification");
        }

        function workWeekDetails(workWeek, columnName) {

            var html = "";

            if (columnName.indexOf("_Target_Qty")) {

                if (workWeek[columnName + "_Target_Qty"] > Math.round(workWeek[columnName] / 1000)) {

                    html = kendo.format("<font color='red'>{0}</font>", kendo.format('{0:N0}', workWeek[columnName] / 1000));
                }
                else {

                    html = kendo.format("<font color='limegreen'>{0}</font>", kendo.format('{0:N0}', workWeek[columnName] / 1000));
                }
            }

            return html;
        }

        function workWeekDetailsYield_old(workWeek, columnName) {

            var html = "";

            if (columnName.indexOf("_Target_Yield")) {

                if (kendo.format('{0:P2}', workWeek[columnName + "_Target_Yield"]) > kendo.format('{0:P2}', workWeek[columnName])) {

                    html = kendo.format("<font color='red'>{0}</font>", kendo.format('{0:P2}', workWeek[columnName]));
                }
                else {

                    html = kendo.format("<font color='limegreen'>{0}</font>", kendo.format('{0:P2}', workWeek[columnName]));
                }

            }

            return html;
        }

        function workWeekDetailsYield(workWeek, columnName) {

            var html = "";

            if (columnName.indexOf("_Target_Yield")) {

                if (workWeek[columnName + "_Target_Yield"] > workWeek[columnName]) {

                    html = kendo.format("<font color='red'>{0}</font>", workWeek[columnName]);
                }
                else {

                    html = kendo.format("<font color='limegreen'>{0}</font>", workWeek[columnName]);
                }

            }

            return html;
        }

        function workWeekDetailsFG(workWeek, dataItem) {

            var html = "";

            if (dataItem.indexOf("_Target_Qty")) {

                if (workWeek[dataItem + "_Target_Qty"] > Math.round(workWeek[dataItem] / 1000)) {

                    html = kendo.format("<font color='red'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }
                else {

                    html = kendo.format("<font color='limegreen'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }

            }

            return html;
        }

        function workWeekDetailsFGW(workWeek, dataItem) {

            var html = "";

            if (dataItem.indexOf("Qty")) {

                if (workWeek["TargetQty"] > Math.round(workWeek[dataItem] / 1000)) {

                    html = kendo.format("<font color='red'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }

                else {

                    html = kendo.format("<font color='limegreen'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }
            }

            return html;
        }

        function workWeekDetailsFGWW(workWeek, dataItem) {

            var regexp = new RegExp('\n', 'g');
            return dataItem.replace(regexp, '<br>');
        }


        function workWeekDetailsTestOutput(workWeek, dataItem) {

            var html = "";

            if (dataItem.indexOf("_Target_Qty")) {

                if (workWeek[dataItem + "_Target_Qty"] / 1000 > Math.round(workWeek[dataItem] / 1000)) {

                    html = kendo.format("<font color='red'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }
                else {

                    html = kendo.format("<font color='limegreen'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }

            }

            return html;
        }

        function workWeekDetailsAssyOutput(workWeek, dataItem) {

            var html = "";

            if (dataItem.indexOf("_Target_Qty")) {

                if (workWeek[dataItem + "_Target_Qty"] > Math.round(workWeek[dataItem] / 1000))
                {

                    html = kendo.format("<font color='red'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }

                else 
                {

                    html = kendo.format("<font color='limegreen'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
                }

            }

            return html;
        }


        function workWeekDetailsTestOutputTarget(workWeek, dataItem) {

            var html = "";

            if (workWeek[dataItem + "_Target_Qty"] > Math.round(workWeek[dataItem] / 1000)) {

                html = kendo.format("<font color='Gray'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
            }
            else {

                html = kendo.format("<font color='Gray'>{0}</font>", kendo.format('{0:N0}', workWeek[dataItem] / 1000));
            }

            return html;
        }

        function formatDate(date, format, utc)
        {
            var MMMM = ["\x00", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            var MMM = ["\x01", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var dddd = ["\x02", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var ddd = ["\x03", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            function ii(i, len) { var s = i + ""; len = len || 2; while (s.length < len) s = "0" + s; return s; }

            var y = utc ? date.getUTCFullYear() : date.getFullYear();
            format = format.replace(/(^|[^\\])yyyy+/g, "$1" + y);
            format = format.replace(/(^|[^\\])yy/g, "$1" + y.toString().substr(2, 2));
            format = format.replace(/(^|[^\\])y/g, "$1" + y);

            var M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;
            format = format.replace(/(^|[^\\])MMMM+/g, "$1" + MMMM[0]);
            format = format.replace(/(^|[^\\])MMM/g, "$1" + MMM[0]);
            format = format.replace(/(^|[^\\])MM/g, "$1" + ii(M));
            format = format.replace(/(^|[^\\])M/g, "$1" + M);

            var d = utc ? date.getUTCDate() : date.getDate();
            format = format.replace(/(^|[^\\])dddd+/g, "$1" + dddd[0]);
            format = format.replace(/(^|[^\\])ddd/g, "$1" + ddd[0]);
            format = format.replace(/(^|[^\\])dd/g, "$1" + ii(d));
            format = format.replace(/(^|[^\\])d/g, "$1" + d);

            var H = utc ? date.getUTCHours() : date.getHours();
            format = format.replace(/(^|[^\\])HH+/g, "$1" + ii(H));
            format = format.replace(/(^|[^\\])H/g, "$1" + H);

            var h = H > 12 ? H - 12 : H == 0 ? 12 : H;
            format = format.replace(/(^|[^\\])hh+/g, "$1" + ii(h));
            format = format.replace(/(^|[^\\])h/g, "$1" + h);

            var m = utc ? date.getUTCMinutes() : date.getMinutes();
            format = format.replace(/(^|[^\\])mm+/g, "$1" + ii(m));
            format = format.replace(/(^|[^\\])m/g, "$1" + m);

            var s = utc ? date.getUTCSeconds() : date.getSeconds();
            format = format.replace(/(^|[^\\])ss+/g, "$1" + ii(s));
            format = format.replace(/(^|[^\\])s/g, "$1" + s);

            var f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();
            format = format.replace(/(^|[^\\])fff+/g, "$1" + ii(f, 3));
            f = Math.round(f / 10);
            format = format.replace(/(^|[^\\])ff/g, "$1" + ii(f));
            f = Math.round(f / 10);
            format = format.replace(/(^|[^\\])f/g, "$1" + f);

            var T = H < 12 ? "AM" : "PM";
            format = format.replace(/(^|[^\\])TT+/g, "$1" + T);
            format = format.replace(/(^|[^\\])T/g, "$1" + T.charAt(0));

            var t = T.toLowerCase();
            format = format.replace(/(^|[^\\])tt+/g, "$1" + t);
            format = format.replace(/(^|[^\\])t/g, "$1" + t.charAt(0));

            var tz = -date.getTimezoneOffset();
            var K = utc || !tz ? "Z" : tz > 0 ? "+" : "-";
            if (!utc) {
                tz = Math.abs(tz);
                var tzHrs = Math.floor(tz / 60);
                var tzMin = tz % 60;
                K += ii(tzHrs) + ":" + ii(tzMin);
            }
            format = format.replace(/(^|[^\\])K/g, "$1" + K);

            var day = (utc ? date.getUTCDay() : date.getDay()) + 1;
            format = format.replace(new RegExp(dddd[0], "g"), dddd[day]);
            format = format.replace(new RegExp(ddd[0], "g"), ddd[day]);

            format = format.replace(new RegExp(MMMM[0], "g"), MMMM[M]);
            format = format.replace(new RegExp(MMM[0], "g"), MMM[M]);

            format = format.replace(/\\(.)/g, "$1");

            return format;
        };

        function excelFileName(e) {

            var gridName = e.sender.content.context.id;
            gridName = gridName.replace("grid", "");

            var timestamp = new Date().format("yyyyMMddHHmmss");

            if (gridName.includes('Groups')) {

                var groupings = $("#Groupings").val().trim();
                groupings = groupings.replace(" ", "_");
                groupings = groupings.replace("-", "");

                e.workbook.fileName = gridName + "-" + groupings + "_" + timestamp + ".xlsx";
            }

            else {

                var classification = $("#Classification").val().trim();
                classification = classification.replace(" ", "_");
                classification = classification.replace("-", "");

                e.workbook.fileName = gridName + "-" + classification + "_" + timestamp + ".xlsx";
            }

        }

        function excelFileNameYearWeek(e) {

            var gridName = e.sender.content.context.id;
            gridName = gridName.replace("grid", "");
            var fYrWk = $("#fYrWk").val();

            var timestamp = new Date().format("yyyyMMddHHmmss");

            if (gridName.includes('Groups')) {

                var groupings = $("#Groupings").val().trim();
                groupings = groupings.replace(" ", "_");
                groupings = groupings.replace("-", "");

                e.workbook.fileName = gridName + "-" + groupings + "_" + fYrWk + "_" + timestamp + ".xlsx";

            }

            else {

                var classification = $("#Classification").val().trim();
                classification = classification.replace(" ", "_");
                classification = classification.replace("-", "");

                e.workbook.fileName = gridName + "-" + classification + "_" + fYrWk + "_" + timestamp + ".xlsx";
            }            

        }


        function winPackageGroupChild(grpPkg2) {

                var winPGC = $("#winGPC").kendoWindow({
                    width: 1100,
                  //  title: " <p style='margin-left:5px'><span style='font-weight: bold' class='fa fa-th-list fa-lg'> " + grpPkg2 + " Details</span></p>",
                    height: 350,
                    visible: false,
                    modal: true,
                    resizable: true
                });


                winPGC.data("kendoWindow").title("<p style='font-weight:Bold'>" + grpPkg2 + "</p>").center().open();
            }

            function linkPackageGroup(pkgGrp1, dataItem) {

                var html = pkgGrp1[dataItem];

                    return html;
            }

            function winPackageGroupChildYield(grpPkg2Yield) {

                var winPGC = $("#winTestYieldChild").kendoWindow({
                    width: 1100,                    
                    height: 350,
                    visible: false,
                    modal: true,
                    resizable: true
                });


                winPGC.data("kendoWindow").title("<p style='font-weight:Bold'>" + grpPkg2Yield + "</p>").center().open();
            }

            function linkPackageGroupYield(pkgGrp1, dataItem) {

                var html = pkgGrp1[dataItem];

                return html;
            }

       
        
    </script>
    <link href="@Url.Content("~/Content/kendo/2015.2.624/kendo.common.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2015.2.624/kendo.mobile.all.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2015.2.624/kendo.dataviz.min.css")" rel="stylesheet" type="text/css" />
    <link id="themeFile" href="@Url.Content("~/Content/kendo/2015.2.624/kendo.silver.min.css")" rel="stylesheet" type="text/css" />
    @*<link href="@Url.Content("~/Content/kendo/2015.2.624/kendo.dataviz.default.min.css")" rel="stylesheet" type="text/css" />*@
    <script src="@Url.Content("~/Scripts/kendo/2015.2.624/jquery.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2015.2.624/jszip.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2015.2.624/kendo.all.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2015.2.624/kendo.aspnetmvc.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo.modernizr.custom.js")"></script>
    <!-- Start Kendo Console window script -->
    <script src="@Url.Content("~/Scripts/console.js")"></script>
    <style type="text/css">
        .console div
        {
            background-image: url("sprite.png");
            background-repeat: no-repeat;
            background-color: transparent;
        }
        * html .console div
        {
            background-image: url("sprite_ie6.png");
        }
        .console
        {
            background-color: #FFF;
            border: 1px solid #CCC;
            color: #333;
            font: 11px Consolas, Monaco, "Bitstream Vera Sans Mono" , "Courier New" , Courier, monospace;
            height: 200px;
            margin: 1.4em 0 0;
            overflow-x: hidden;
            overflow-y: scroll;
            text-align: left;
        
        }
        .console .count
        {
            background-color: #91AFEF;
            -moz-border-radius: 15px;
            -webkit-border-radius: 15px;
            border-radius: 15px;
            color: #FFFFFF;
            font-size: 10px;
            margin-left: 5px;
            padding: 2px 6px 2px 5px;
        }
        .console div
        {
            background-position: 6px -95px;
            border-bottom: 1px solid #DDD;
            padding: 5px 5px 4px 24px;
        }
        .console .error
        {
            background-position: 6px -135px;
        }
        
        
         .note 
        {
            position: relative;
         }
        
        .note:after 
       {
        /* border-left: 20px solid transparent;
	    border-bottom: 20px solid transparent;
	
	    border-top: 20px solid #f00;*/
	    
        content: "";
        position: absolute;
        top: 0;
        right: 0;
	    width: 0; 
	    height: 0; 
        display: block;
	    border-left:  0.5em solid transparent;
	    border-bottom: 0.5em solid transparent;
	
	    border-top: 0.5em solid #f00;
        } 
         
        .k-widget.k-tooltip 
        {
        margin-top: 10px;
        font-family: Tahoma; 
        font-size: 10.5pt;
        background-color: #FFFFAD;
        color: black;
        }
        
        .pckgeGroup1 
        {            
            color:#515967;    
        }        
        
        .pckgeGroup1Yield 
        {            
            color:#515967;    
        }        
        
        div#tab1Test li.k-item.k-state-default.k-tab-on-top.k-state-active
        {
                background-color: #5496cf !important;
                color: White !important;
               
        }
        
          div#tab5Assy li.k-item.k-state-default.k-tab-on-top.k-state-active
        {
                background-color: #5496cf !important;
                color: White !important;
               
        }
         
          div#tab2Test li.k-item.k-state-default.k-tab-on-top.k-state-active
        {
                background-color: #5496cf !important;
                color: White !important;
               
        }
        
           div#tab6Test li.k-item.k-state-default.k-tab-on-top.k-state-active
        {
                background-color: #5496cf !important;
                color: White !important;
               
        }
        
       div#tab3Test li.k-item.k-state-default.k-tab-on-top.k-state-active
        {
                background-color: #5496cf !important;
                color: White !important;
               
        }
        
        div#tab4Test li.k-item.k-state-default.k-tab-on-top.k-state-active
        {
                background-color: #5496cf !important;
                color: White !important;
               
        }
      
    </style>
    <!-- End Kendo Console window script -->
</head>
<body>
    <div id="spinner" class="spinner" style="display: none;">
        <img id="img-spinner" src="../../Images/ajax-loading.gif" alt="Loading" />
    </div>
    @Html.Hidden("WipInv")
    @Html.Hidden("Groupings")
    @Html.Hidden("Classification")
    @Html.Hidden("FYear")
    @Html.Hidden("fYrMo")
    @Html.Hidden("fYrWk")
    @Html.Hidden("varComments")
    @Html.Hidden("varAssyComments")        
    @Html.Hidden("hidRowIndex")
    @Html.Hidden("hidColIndex")
    @Html.Hidden("hidButtonVal")
    @Html.Hidden("grpPkgWw")
    @Html.Hidden("grpAssyPkgWw")
    @Html.Hidden("hidAssyOperation")
    <input style="width: 250px; " type="hidden" id="cellIdForDisplaying" />
     <input style="width: 250px; " type="hidden" id="selectedGridCell" />        
     <input style="width: 250px; " type="hidden" id="DateTimeNow" />
     <input type="hidden" id="hidCurrUser" value='@Common.GetWebCurrentUser(Common.WebUserInformation.Username)' />
      <input style="width: 250px; " type="hidden" id="txtUserAccess" />
      <div class="container-fluid" id="winGPC" style="display: none;">
   
                                            @(Html.Kendo().Grid<dynamic>()
                                                 .Name("gridTestOutputChild")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("Outs.xls"))  
                                                  .AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 100%" })
                                                  .Scrollable()
                                                  .Pageable(pageable => pageable
                                                  .Refresh(true)
                                                  .PageSizes(true)
                                                  .ButtonCount(5))
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()

                                                            .Read(read => read.Action("SpDashboardTestOutput_child", "Home"))
                                                            .PageSize(100))
                                             )                    
     </div>

     <div class="container-fluid" id="winTestYieldChild" style="display: none;">
   
                                            @(Html.Kendo().Grid<dynamic>()
                                                 .Name("gridTestYieldChild")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("Yield.xls"))  
                                                  .AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 100%" })
                                                  .Scrollable()
                                                  .Pageable(pageable => pageable
                                                  .Refresh(true)
                                                  .PageSizes(true)
                                                  .ButtonCount(5))
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Read(read => read.Action("SpDashboardTestYield_child", "Home"))
                                                            .PageSize(100))
                                             )                    
     </div>

        <div class="container-fluid" id="win" style="display: none;">

              <textarea cols="33" rows="6" id="remarks"></textarea> 
            <br />
            <br />
            <button type="button" class="btn btn-primary btn-sm" id="save">
                <span class="fa fa-floppy-o" id="spSave">&nbsp; Save</span></button>
        
            <button type="button" class="btn btn-warning btn-sm" id="cancel">
                <span class="fa fa-ban">&nbsp; Cancel</span></button>  
                
                
              <button type="button" class="btn btn-danger btn-sm" id="delete" style="display:none">
                <span class="fa fa-ban">&nbsp; Delete</span></button>      
        </div>

        <div class="container-fluid" id="winAssy" style="display: none;">
  
           <textarea style="text-align: left; font-weight:bold; font-size:small" cols="33" rows="6" id="remarksAssy"></textarea> 
            <br />
            <br />
            <button type="button" class="btn btn-primary btn-sm" id="saveAssy">
                <span class="fa fa-floppy-o" id="spSaveAssy">&nbsp; Save</span></button>
        
            <button type="button" class="btn btn-warning btn-sm" id="cancelAssy">
                <span class="fa fa-ban">&nbsp; Cancel</span></button>  
                
                
              <button type="button" class="btn btn-danger btn-sm" id="deleteAssy" style="display:none">
                <span class="fa fa-ban">&nbsp; Delete</span></button>      
        </div>

        <div class="container-fluid" id="winNotification" style="display: none;">
   
           <p style="margin-left:5px"><span class="fa fa-info-circle fa-lg"></span> Comment was successfully deleted</p>
          
        </div>

        <div class="modal fade" id="materialsIISModal" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        
        <div class="modal-content">
            <div class="modal-header">
            <h4 class="modal-title" style="font-family: 'Century Gothic'; font-weight: bold; text-align: center">Materials Incoming Inspection System</h4>
                <table class="table table-striped">
                    <tr>
                        <td style="font-family: 'Century Gothic'">
                            @*<button id="btnReceiveMaterials" type="button" class="btn btn-info btn-lg btn-block" style="font-family: 'Century Gothic'">
                                Receive Materials</button>*@

                                @Html.ActionLink("Receive Materials", "ReceiveMaterials", "Home", new { @class = "btn btn-info btn-lg btn-block" })
                        </td>
                    </tr>
                    <tr>
                        <td>
                           @* <button type="button" class="btn btn-info btn-lg btn-block" style="font-family: 'Century Gothic'" disabled="disabled">
                                Record Result Inspection</button>*@

                                @Html.ActionLink("Record Result Inspection", "ResultInspection", "Home", new { @class = "btn btn-info btn-lg btn-block" })
                        </td>
                    </tr>
                </table>
                <button id="btnCancelMIIS" class="btn btn-danger">
                    Cancel</button>
            </div>
        </div>
        
    </div>
</div>

    <nav class="top-bar bottomnav" data-topbar>
        <section class="top-bar-section">
            <div style="padding-top: 8px; padding-left: 8px; padding-bottom: 3px; padding-right: 8px;">
                @*<img class="img-responsive " alt="Allegro MicroSystems Philippines Incorporated"
                    height="67" width="224" src="~/Images/ampi.png">
                <br />*@
                @(Html.Kendo().Menu()
                            .Name("Menu")
                            .Items(items =>
                            {
                                //items.Add()
                                //    .Text("<i class='fa fa-home'></i> Home").Action("Index", "Home").Encoded(false);

                                items.Add().Text("<label id='fullpath' style='color: black'></label>")
                                    .Encoded(false)
                                    .Enabled(false);
                               

                            })
                        )
            </div>
        </section>
    </nav>
    <!-- Splitter -->
    <div name="mainDiv" id="mainDiv" class="mainpage">
        @(Html.Kendo().Splitter()
            .Name("mainSplitter")
            .Orientation(SplitterOrientation.Vertical)
            //.HtmlAttributes(new { style = "height: 72%; height:82vh;" })
            .Panes(verticalPanes =>
            {
            verticalPanes.Add()
            .HtmlAttributes(new { id = "top-pane" })
            .Scrollable(false)
            .Collapsible(false)
            .Content(
                Html.Kendo().Splitter()
                .Name("horizontal")
                .HtmlAttributes(new { style = "height: 100%;" })
                .Panes(horizontalPanes =>
                {
                    horizontalPanes.Add()
                        .HtmlAttributes(new { id = "left-pane" })
                        .MaxSize("300px")
                        .MinSize("250px")
                        .Size("300px")
                        .Collapsible(true)
                        //.Collapsed(false)
                        //.Content(Html.Action("LeftPaneMenu").ToString());
                        .Content("<div style='padding-top: 8px; padding-left: 8px; padding-bottom: 8px; padding-right: 8px;'>" +

                            Html.Kendo().TreeView()
                            .Name("treeviewMenu")
                            .Events(events => events
                                .Select("onTreeviewMenuSelect")
                                .Change("onTreeviewMenuChange")
                                .Collapse("onTreeviewMenuCollapse")
                            //  .Expand("onTreeviewMenuExpand")
                            )
                            .Items(treeview =>
                            {
                                treeview.Add().Text("AMPI")
                                    //.Encoded(true)
                                    .Id(System.Guid.NewGuid().ToString())
                                    .SpriteCssClasses("fa fa-flag")
                                    .Expanded(false)
                                    .Selected(true)
                                    .Items(root =>
                                    {
                                    root.Add().Text("TEST")
                                            .Id(System.Guid.NewGuid().ToString())

                                            .SpriteCssClasses("fa fa-pencil-square-o fa-lg")

                                            .Expanded(false)

                                            .Items(test =>
                                            {

                                                test.Add().Text("GTS")
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                    // Sub nodes for AMPI->TEST->GTS
                                                    .Items(gts =>
                                                    {
                                                        gts.Add().Text("Summary")
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;

                                                        List<string> gts_hide = new List<string>();
                                                        gts_hide.Add("SL");
                                                        gts_hide.Add("SM");
                                                        gts_hide.Add("SN");

                                                        foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["GTS"])
                                                        {
                                                            if (!gts_hide.Contains(tc.PackageGroup1.ToString()))
                                                            {
                                                                gts.Add().Text(tc.PackageGroup1)
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;
                                                            }
                                                        }
                                                    });

                                                test.Add().Text("SOHED")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                    .Items(shd =>
                                                    {
                                                        shd.Add().Text("Summary")
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;

                                                        foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["SOHED"])
                                                        {
                                                            shd.Add().Text(tc.PackageGroup1)
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;
                                                        }
                                                    });

                                                test.Add().Text("CURSEN")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                    .Items(crs =>
                                                    {
                                                        crs.Add().Text("Summary")
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;

                                                        foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["CURSEN"])
                                                        {
                                                            crs.Add().Text(tc.PackageGroup1)
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;
                                                        }
                                                    });

                                                test.Add().Text("IC")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                    .Items(ic =>
                                                    {
                                                        ic.Add().Text("Summary")
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;

                                                        List<string> ic_hide = new List<string>();
                                                        ic_hide.Add("PLCC");

                                                        foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["IC"])
                                                        {
                                                            if (!ic_hide.Contains(tc.PackageGroup1.ToString()))
                                                            {
                                                                ic.Add().Text(tc.PackageGroup1)
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;
                                                            }
                                                        }
                                                    });

                                                test.Add().Text("SEN-QFN")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                    .Items(sen =>
                                                    {
                                                        sen.Add().Text("Summary")
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;

                                                        foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["SEN-QFN"])
                                                        {
                                                            sen.Add().Text(tc.PackageGroup1)
                                                               .Id(System.Guid.NewGuid().ToString())
                                                               .SpriteCssClasses("fa fa-list")
                                                               ;
                                                        }
                                                    });

                                                test.Add().Text("SENSOR SIP")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                     .Items(sip =>
                                                     {
                                                         sip.Add().Text("Summary")
                                                                .Id(System.Guid.NewGuid().ToString())
                                                                .SpriteCssClasses("fa fa-list")
                                                                ;

                                                         List<string> sensor_sip_hide = new List<string>();
                                                         sensor_sip_hide.Add("KH");
                                                         sensor_sip_hide.Add("OU");
                                                         sensor_sip_hide.Add("SOIC");

                                                         foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["SENSOR SIP"])
                                                         {
                                                             if (!sensor_sip_hide.Contains(tc.PackageGroup1.ToString()))
                                                             {
                                                                 sip.Add().Text(tc.PackageGroup1)
                                                                .Id(System.Guid.NewGuid().ToString())
                                                                .SpriteCssClasses("fa fa-list")
                                                                ;
                                                             }
                                                         }
                                                     });

                                                test.Add().Text("USB")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-code-fork")
                                                     .Items(sip =>
                                                     {
                                                         sip.Add().Text("Summary")
                                                                .Id(System.Guid.NewGuid().ToString())
                                                                .SpriteCssClasses("fa fa-list")
                                                                ;

                                                         foreach (var tc in (List<ProductionDashboard.Models.OutsTestLookUp>)ViewData["USB"])
                                                         {
                                                             sip.Add().Text(tc.PackageGroup1)
                                                                .Id(System.Guid.NewGuid().ToString())
                                                                .SpriteCssClasses("fa fa-list")
                                                                ;
                                                         }
                                                     });
                                            });

                                    root.Add().Text("ASSEMBLY")
                                            .Id(System.Guid.NewGuid().ToString())
                                            .Expanded(false)
                                            .SpriteCssClasses("fa fa-pencil-square-o fa-lg")

                                            .Items(assy =>
                                            {
                                                foreach (var tc in (List<ProductionDashboard.Models.OutsAssyLookUp>)ViewData["ProductGroup"])
                                                {
                                                    assy.Add().Text(tc.ProductGroup)
                                                       .Id(System.Guid.NewGuid().ToString())
                                                       .SpriteCssClasses("fa fa-list")
                                                       ;
                                                }
                                            });


                                          @*  root.Add().Text("HISTORICAL LOGS")
                                                .Id(System.Guid.NewGuid().ToString())
                                                .Expanded(false)
                                                .SpriteCssClasses("fa fa-pencil-square-o fa-lg"); *@

                                        });

                                }).ToHtmlString() + "</div>"

                            );

                        // Monthly Splitter
                        horizontalPanes.Add()
                            .HtmlAttributes(new { id = "center-pane" })
                            .MaxSize("130px")
                            .MinSize("130px")
                            .Size("130px")
                            .Collapsible(true)
                            //.Collapsed(true)
                            .Content("<div id='center-pane-div' style='padding-top: 8px; padding-left: 8px; padding-bottom: 8px; padding-right: 8px; display: none;'>" +

                                Html.Kendo().TreeView()
                                .Name("treeviewMonthly")
                                .Events(events => events
                                    .Select("onTreeviewMonthlySelect")
                                    .Change("onTreeviewMonthlyChange")
                                    .Collapse("onTreeviewMonthlyCollapse")
                                    .Expand("onTreeviewMonthlyExpand")
                                )

                                .Items(treeview =>
                                {

                                    // Rolling months 
                                    for (int i = 11; i > -1; i--)
                                    {

                                        treeview.Add().Text(DateTime.Today.AddMonths(-i).ToString("MMM yy"))
                                            .Id(System.Guid.NewGuid().ToString())
                                            .SpriteCssClasses("fa fa-calendar")
                                            .Items(months =>
                                            {
                                                foreach (var ww in (List<ProductionDashboard.Models.WorkWeek>)ViewData[DateTime.Today.AddMonths(-i).ToString("MMM")])
                                                {
                                                    months.Add().Text("WW" + ww.WORKWEEKINT)    // Rolling weeks
                                                       .Id(System.Guid.NewGuid().ToString())
                                                       .SpriteCssClasses("fa fa-th")
                                                       ;
                                                }
                                            });

                                    }


                                }
                                )
                                .ToHtmlString() + "</div> &nbsp;"
                            );

                        // RenderBody Splitter
                        horizontalPanes.Add()
                            .HtmlAttributes(new { id = "right-pane" })
                            .Content(@<div id="renderBodyDiv" class="renderbodydiv" style="padding-top: 8px;
                                padding-left: 8px; padding-bottom: 8px; padding-right: 8px; overflow: hidden;">
                                <div id="welcomeNote" class="responsive-container">
                                    <div class="dummy">
                                    </div>
                                    <div class="img-container">
                                        <div class="centerer">
                                        </div>
                                        <img src="~/Images/dashboard.png" style="border: 0px solid;" />
                                    </div>
                                </div>
                                @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1Test")       //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1")
                                )
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span id='fontawesometext' style='font-weight:bold; color: white' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabFGFont' style='font-weight: Bold; color: white'>Weekly Moves To FG</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<div>" +

                                                 Html.Kendo().Grid<dynamic>()
                                                 .Name("gridTestOutput")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("Outs.xls"))
                                                 //.Columns(columns =>
                                                 //{
                                                 //    foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                 //    {

                                                 //        if ((column.ColumnName).Trim() == "Groupings")
                                                 //        {
                                                 //            columns.Bound("Groupings")
                                                 //                   .ClientGroupHeaderTemplate("#=value#")
                                                 //                   .Visible(true)
                                                 //                   .Hidden(true)
                                                 //                   ;
                                                 //        }
                                                 //        else if ((column.ColumnName).Trim() == "Classification")
                                                 //        {
                                                 //            columns.Bound("Classification")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                 //                  .ClientGroupFooterTemplate("Total : ")
                                                 //                  .ClientFooterTemplate("Grand Total : ")
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                 //                  .Width(150);
                                                 //        }

                                                 //        else if ((column.ColumnName).Trim().Contains("_Target_Qty"))
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientFooterTemplate("#= kendo.format('{0:N0}', sum)#")
                                                 //                  .ClientGroupFooterTemplate("#= kendo.format('{0:N0}', sum) #")
                                                 //                  .Title("Target")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-size:small; font-weight: bold; color: Blue;" })
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .Width(100);
                                                 //        }
                                                 //        else
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientTemplate("#= workWeekDetails(data, '" + column.ColumnName + "') #")
                                                 //                  .ClientGroupFooterTemplate("#= kendo.format('{0:N0}', sum/1000) #")
                                                 //                  .ClientGroupFooterTemplate("#= kendo.format('{0:N0}', sum/1000) #")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .Width(100);
                                                 //        }
                                                 //    }
                                                 //})
                                                  //.AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 690px;" })
                                                  .Scrollable()
                                                  .Pageable(pageable => pageable
                                                  .Refresh(true)
                                                  .PageSizes(true)
                                                  .ButtonCount(5))
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Model(model =>
                                                            //{
                                                            //    foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                            //    {
                                                            //        model.Field(column.ColumnName, column.DataType);

                                                            //    }

                                                            //}) // End of Model

                                                            //.Aggregates(aggregates =>
                                                            //{

                                                            //    foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                            //    {
                                                            //        if ((column.ColumnName).Trim().Contains("WW"))
                                                            //        {
                                                            //            aggregates.Add(column.ColumnName, typeof(Int32?)).Sum();
                                                            //        }

                                                            //    }

                                                            //}) // End of Aggregates

                                                            //.Group(g => g.Add("Groupings", typeof(string)))
                                                            .Read(read => read.Action("SpDashboardTestOutput_parent", "Home"))
                                                            .PageSize(100))


                                                  // .Events( ev => ev.DataBound("removeCol"))    
                                                  .ToHtmlString() + "</div>"

                                                  ); // End of Outs Tab                                                                                 

                                        items.Add().Text("<span id='fontawesometext1' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabFGInvFont' style='font-weight: Bold;'>Weekly FG Inventory</span>") //Add item with text "Item1")
                                           .Encoded(false)                                           
                                           .Content("<div>" +

                                            Html.Kendo().Grid<dynamic>()
                                            .Name("gridFGInventory")
                                            .ToolBar(tools => tools.Excel())
                                            .Excel(excel => excel.FileName("FG_Inventory.xlsx"))
                                            @*.Columns(columns =>
                                            {
                                                foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                    {
                                                        columns.Bound(column.ColumnName);                                                    
                                                    }
                                            })
                                             .AutoBind(false)*@
                                             .Selectable(selectable => selectable
                                             .Type(GridSelectionType.Row))
                                             .HtmlAttributes(new { style = "height: 690px;" })
                                             .Scrollable()
                                             .Pageable(pageable => pageable
                                             .Refresh(true)
                                             .PageSizes(true)
                                             .ButtonCount(5))
                                            .DataSource(dataSource => dataSource
                                                       .Ajax()
                                                       @* .Model(model =>
                                                       {
                                                           foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                           {
                                                               model.Field(column.ColumnName, column.DataType);

                                                           }

                                                       }) // End of Model

                                                       .Aggregates(aggregates =>
                                                       {

                                                           foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                           {
                                                               if ((column.ColumnName).Trim().Contains("WW"))
                                                               {
                                                                   aggregates.Add(column.ColumnName, typeof(Int32?)).Sum();
                                                               }

                                                           }

                                                       }) // End of Aggregates

                                                       .Group(g => g.Add("Groupings", typeof(string)))*@
                                                       .Read(read => read.Action("SpDashboardFGInventory", "Home"))
                                                       .PageSize(100))


                                             // .Events( ev => ev.DataBound("removeCol"))    
                                             .ToHtmlString() + "</div>"

                                             ); // End of Outs Tab  

                                        items.Add().Text("<span id='fontawesometext2' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabAsmbldInvFont' style='font-weight: Bold;'>Weekly Asmbld Goods Inventory</span>") //Add item with text "Item1")
                                           .Encoded(false)                                           
                                           .Content("<div>" +

                                            Html.Kendo().Grid<dynamic>()
                                            .Name("gridAsmbldGoodsInv")
                                            .ToolBar(tools => tools.Excel())
                                            .Excel(excel => excel.FileName("AsmbldGoods_Inventory.xlsx"))
                                            @*.Columns(columns =>
                                            {
                                                foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                    {
                                                        columns.Bound(column.ColumnName);                                                   
                                                }
                                            })
                                             .AutoBind(false)*@
                                             .Selectable(selectable => selectable
                                             .Type(GridSelectionType.Row))
                                             .HtmlAttributes(new { style = "height: 690px;" })
                                             .Scrollable()
                                             .Pageable(pageable => pageable
                                             .Refresh(true)
                                             .PageSizes(true)
                                             .ButtonCount(5))
                                             .DataSource(dataSource => dataSource
                                                       .Ajax()
                                                       //.Model(model =>
                                                       //{
                                                       //    foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                       //    {
                                                       //        model.Field(column.ColumnName, column.DataType);

                                                       //    }

                                                       //}) // End of Model

                                                       //.Aggregates(aggregates =>
                                                       //{

                                                       //    foreach (System.Data.DataColumn column in Model.Tables[0].Columns)
                                                       //    {
                                                       //        if ((column.ColumnName).Trim().Contains("WW"))
                                                       //        {
                                                       //            aggregates.Add(column.ColumnName, typeof(Int32?)).Sum();
                                                       //        }

                                                       //    }

                                                       //}) // End of Aggregates

                                                       //.Group(g => g.Add("Groupings", typeof(string)))
                                                       .Read(read => read.Action("SpDashboardFGInventory", "Home"))
                                                       .PageSize(100))
                                                                                                    
                                             .ToHtmlString() + "</div>"

                                             ); // End of Outs Tab  

                                        items.Add().Text("<span id='fontawesometext3' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabYldFont' style='font-weight: Bold;'>Yield</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Content("<div>" +

                                                 Html.Kendo().Grid<dynamic>()
                                                 .Name("gridTestYield")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("Yield.xls"))
                                                 //.Columns(columns =>
                                                 //{
                                                 //    foreach (System.Data.DataColumn column in Model.Tables[11].Columns)
                                                 //    {

                                                 //        if ((column.ColumnName).Trim() == "TestGrouping")
                                                 //        {
                                                 //            columns.Bound("TestGrouping")
                                                 //                   .ClientGroupHeaderTemplate("#=value#")
                                                 //                   .Visible(true)
                                                 //                   .Hidden(true)
                                                 //                   ;
                                                 //        }
                                                 //        else if ((column.ColumnName).Trim() == "TestClassification")
                                                 //        {
                                                 //            columns.Bound("TestClassification")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                 //                  .Title("Classification")
                                                 //                  .ClientGroupFooterTemplate("Average : ")
                                                 //                  .ClientFooterTemplate("Total Average : ")
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: left; font-size:small;" })
                                                 //                  .Width(150);
                                                 //        }

                                                 //        else if ((column.ColumnName).Trim().Contains("_Target_Yield"))
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .Format("{0:P2}")
                                                 //                  .ClientFooterTemplate("#:kendo.format('{0:P2}', average)#")
                                                 //                  .ClientGroupFooterTemplate("#:kendo.format('{0:P2}', average) #")
                                                 //                  .Title("Target")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-size:small;  font-weight: bold; color: Blue;" })
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: center; font-size:small;" })
                                                 //                  .Width(100);
                                                 //        }
                                                 //        else
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientTemplate("#= workWeekDetailsYield(data, '" + column.ColumnName + "') #")
                                                 //                  .ClientGroupFooterTemplate("#:kendo.format('{0:P2}', average) #")
                                                 //                  .ClientFooterTemplate("#:kendo.format('{0:P2}', average)#")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: center; font-size:small;" })
                                                 //                  .Width(100);
                                                 //        }

                                                 //    }

                                                 //})
                                                 // .AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 690px;" })
                                                  .Scrollable()
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Model(model =>
                                                            //{
                                                            //    foreach (System.Data.DataColumn column in Model.Tables[11].Columns)
                                                            //    {
                                                            //        model.Field(column.ColumnName, column.DataType);

                                                            //    }

                                                            //}) // End of Model

                                                            //.Aggregates(aggregates =>
                                                            //{

                                                            //    foreach (System.Data.DataColumn column in Model.Tables[11].Columns)
                                                            //    {
                                                            //        if ((column.ColumnName).Trim().Contains("WW"))
                                                            //        {
                                                            //            aggregates.Add(column.ColumnName, typeof(Decimal?)).Average();
                                                            //        }

                                                            //    }

                                                            //}) // End of Aggregates

                                                            //.Group(g => g.Add("TestGrouping", typeof(string)))
                                                            .Read(read => read.Action("SpDashboardTestYield_parent", "Home"))
                                                            .PageSize(100))



                                                  .ToHtmlString() + "</div>"
                                                  ); // End of Yield Tab     

                                    }) // End of Tabstrip Items


                                )  


                                @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab2Test")       //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .Events(events => events
                                    .Show("onShowTab2")
                                    .Select("onSelectTab2")
                                    .Activate("onActivateTab2")
                                    .ContentLoad("onContentLoadTab2")
                                    .Error("onErrorTab2"))
                                    .Items(items =>
                                    {

                                        items.Add().Text("<span style='font-weight:bold; color:white' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span style='font-weight:bold; color:white'>Shiftly Asmbld Goods Inventory</span>") //Add item with text "Item1")   
                                                .Selected(true)
                                                .Encoded(false)
                                                .Content("<div>" +
                                                Html.Kendo()
                                                          .Grid<ProductionDashboard.Models.invParents>()
                                                          .Name("gridINV")
                                                          .ToolBar(tools => tools.Excel())
                                                          .Columns(columns =>
                                                          {

                                                              columns.Bound(p => p.Connector).Visible(false);
                                                              columns.Bound(p => p.AsOf)
                                                                  .ClientGroupHeaderTemplate("#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>")
                                                                  .Visible(true).Hidden(true)
                                                                  .Title("As of")
                                                                  ;
                                                              columns.Bound(p => p.PackageGroup1)
                                                                  .Title("PackageGroup")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                                  .Width(200)
                                                                  .ClientFooterTemplate("Total : ")
                                                                  .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                                  ;
                                                              columns.Bound(p => p.Qty)
                                                                  .Width(700)
                                                                  .Filterable(false)
                                                                  .Format("{0:N0}")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: left; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                                  .ClientTemplate("#= (Qty == 0) ? '' : kendo.format('{0:N0}', Qty/1000) #")
                                                                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                                                  .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                                 ;

                                                          })
                                                            .AutoBind(false)
                                                            .Sortable()
                                                            .Scrollable()
                                                            .Resizable(resizable => resizable.Columns(true))
                                                            .HtmlAttributes(new { style = "height: 690px;" })
                                                            .ClientDetailTemplateId("client-template_wipChildren")
                                                            .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .Aggregates(aggregates =>
                                                                {

                                                                    aggregates.Add(p => p.Qty).Sum();

                                                                }) // End of Aggregates
                                                                .Group(groups =>
                                                                    groups.Add(p => p.AsOf)
                                                                    )
                                                            .Read(read => read.Action("DashBoardInvParent_Read", "Grid").Data("additionalInfo")))
                                                            .Events(events => events.ExcelExport("excelFileName"))
                                                            .ToHtmlString() + "</div>"
                                                    );

                                        //items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>Inventory Stocks</strong>") //Add item with text "Item1")   
                                        //    .Selected(false)
                                        //    .Encoded(false)
                                        //    .Content("<div>" +
                                        //    Html.Kendo()
                                        //              .Grid<ProductionDashboard.Models.invStocksProductGroupParentNew>()
                                        //              .Name("gridInvStocksParent")
                                        //              .ToolBar(tools => tools.Excel())
                                        //              .Columns(columns =>
                                        //              {

                                        //                  columns.Bound(p => p.Connector).Visible(false);
                                        //                  columns.Bound(p => p.AsOf)
                                        //                      .ClientGroupHeaderTemplate("#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>")
                                        //                      .Visible(true).Hidden(true)
                                        //                      .Title("As of")
                                        //                      ;
                                        //                  columns.Bound(p => p.PackageGroup1)
                                        //                      .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                      .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                        //                      .Width(200)
                                        //                      .ClientFooterTemplate("Total : ")
                                        //                      .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                        //                      ;
                                        //                  columns.Bound(p => p.Qty)
                                        //                      .Width(700)
                                        //                      .Filterable(false)
                                        //                      .Format("{0:N0}")
                                        //                      .HeaderHtmlAttributes(new { style = "text-align: left; font-weight:bold;" })
                                        //                      .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                        //                      .ClientTemplate("#= (Qty == 0) ? '' : kendo.format('{0:N0}', Qty/1000) #")
                                        //                      .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                        //                      .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                        //                     ;

                                        //              })
                                        //                .AutoBind(false)
                                        //                .Sortable()
                                        //                .Scrollable()
                                        //                .Resizable(resizable => resizable.Columns(true))
                                        //                .HtmlAttributes(new { style = "height: 690px;" })
                                        //                .ClientDetailTemplateId("client-template_invStocksChild")
                                        //                .DataSource(dataSource => dataSource
                                        //                    .Ajax()
                                        //                    .Aggregates(aggregates =>
                                        //                    {

                                        //                        aggregates.Add(p => p.Qty).Sum();

                                        //                    }) // End of Aggregates
                                        //                    .Group(groups =>
                                        //                        groups.Add(p => p.AsOf)
                                        //                        )
                                        //                .Read(read => read.Action("DashBoardInvStocksParent_Read", "Grid").Data("additionalInfo")))
                                        //                .Events(events => events.ExcelExport("excelFileName"))
                                        //                .ToHtmlString() + "</div>"

                                        //    );

                                    })
                                )
                                @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab3Test")                               //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.                                   
                                    .Events(events => events
                                    .Show("onShowTab3")
                                    .Select("onSelectTab3")
                                    .Activate("onActivateTab3")
                                    .ContentLoad("onContentLoadTab3")
                                    .Error("onErrorTab3")
                                )
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span id='fontawesome4' style='font-weight:bold; color:white' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabOutsPerOperation' style='font-weight:bold; color:white'>Outs per Operation</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<div>" +
                                                Html.Kendo().Grid<ProductionDashboard.Models.outsTestTransposeWorkDayWTDParentClass>()
                                                    .Name("gridOutsPClass")
                                                    .Selectable()
                                                    .ToolBar(tools => tools.Excel())
                                                    .Columns(columns =>
                                                    {
                                                        columns.Bound(p => p.OpClass).Visible(true).Hidden(true);
                                                        columns.Bound(p => p.Operations)
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                                  .Visible(true)
                                                                  .Width(250)
                                                                  .Filterable(true);
                                                        columns.Bound(p => p.TotalQty)
                                                                  .Filterable(false)
                                                                  .Format("{0:N0}")
                                                                  .ClientTemplate("#= (TotalQty == 0) ? '' : kendo.format('{0:N0}', TotalQty/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                        columns.Bound(p => p.Saturday)
                                                                  .ClientTemplate("#= (Saturday == 0) ? '' : kendo.format('{0:N0}', Saturday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Sat")
                                                                  .Format("{0:N0}");
                                                        columns.Bound(p => p.Sunday)
                                                                  .ClientTemplate("#= (Sunday == 0) ? '' : kendo.format('{0:N0}', Sunday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Sun")
                                                                  .Format("{0:N0}");
                                                        columns.Bound(p => p.Monday)
                                                                  .ClientTemplate("#= (Monday == 0) ? '' : kendo.format('{0:N0}', Monday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Mon")
                                                                  .Format("{0:N0}");
                                                        columns.Bound(p => p.Tuesday)
                                                                  .ClientTemplate("#= (Tuesday == 0) ? '' : kendo.format('{0:N0}', Tuesday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Tue")
                                                                  .Format("{0:N0}");
                                                        columns.Bound(p => p.Wednesday)
                                                                  .ClientTemplate("#= (Wednesday == 0) ? '' : kendo.format('{0:N0}', Wednesday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Wed")
                                                                  .Format("{0:N0}");
                                                        columns.Bound(p => p.Thursday)
                                                                  .ClientTemplate("#= (Thursday == 0) ? '' : kendo.format('{0:N0}', Thursday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Thu")
                                                                  .Format("{0:N0}");
                                                        columns.Bound(p => p.Friday)
                                                                  .ClientTemplate("#= (Friday == 0) ? '' : kendo.format('{0:N0}', Friday/1000) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Filterable(false)
                                                                  .Title("Fri")
                                                                  .Format("{0:N0}");
                                                    })
                                                .AutoBind(false)
                                                .Pageable(pager => pager
                                                .Refresh(true))
                                                .Sortable()
                                                .Scrollable()
                                                .Resizable(resizable => resizable.Columns(true))
                                                .Filterable()
                                                .HtmlAttributes(new { style = "height: 690px;" })
                                                .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .PageSize(100)
                                                        .Read(read => read.Action("OutsSummaryWW_Read", "Grid").Data("additionalInfo")))
                                                .Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                                .ClientDetailTemplateId("client-template_OutsCClass")
                                                .ToHtmlString() + "</div>" +

                                                "<div id='OutsPGroups'>" +

                                                Html.Kendo()
                                                  .Grid<ProductionDashboard.Models.outsTestTransposeWorkDayWTDParentGroup>()
                                                  .Name("gridOutsPGroups")
                                                  .ToolBar(tools => tools.Excel())
                                            //.Excel(excel => excel.FileName("OutsPerGroups.xls"))
                                                  .Columns(columns =>
                                                  {
                                                      columns.Bound(p => p.OpGroups).Visible(true).Hidden(true);
                                                      columns.Bound(p => p.Operations)
                                                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                            .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                            .Visible(true)
                                                            .Width(250)
                                                            .Filterable(true);
                                                      columns.Bound(p => p.TotalQty)
                                                            .Filterable(false)
                                                            .Format("{0:N0}")
                                                            .ClientTemplate("#= (TotalQty == 0) ? '' : kendo.format('{0:N0}', TotalQty/1000) #")
                                                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                      columns.Bound(p => p.Saturday)
                                                             .ClientTemplate("#= (Saturday == 0) ? '' : kendo.format('{0:N0}', Saturday/1000) #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Filterable(false)
                                                             .Title("Sat")
                                                             .Format("{0:N0}");
                                                      columns.Bound(p => p.Sunday)
                                                              .ClientTemplate("#= (Sunday == 0) ? '' : kendo.format('{0:N0}', Sunday/1000) #")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                              .Filterable(false)
                                                              .Title("Sun")
                                                              .Format("{0:N0}");
                                                      columns.Bound(p => p.Monday)
                                                              .ClientTemplate("#= (Monday == 0) ? '' : kendo.format('{0:N0}', Monday/1000) #")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                              .Filterable(false)
                                                              .Title("Mon")
                                                              .Format("{0:N0}");
                                                      columns.Bound(p => p.Tuesday)
                                                              .ClientTemplate("#= (Tuesday == 0) ? '' : kendo.format('{0:N0}', Tuesday/1000) #")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                              .Filterable(false)
                                                              .Title("Tue")
                                                              .Format("{0:N0}");
                                                      columns.Bound(p => p.Wednesday)
                                                              .ClientTemplate("#= (Wednesday == 0) ? '' : kendo.format('{0:N0}', Wednesday/1000) #")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                              .Filterable(false)
                                                              .Title("Wed")
                                                              .Format("{0:N0}");
                                                      columns.Bound(p => p.Thursday)
                                                              .ClientTemplate("#= (Thursday == 0) ? '' : kendo.format('{0:N0}', Thursday/1000) #")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                              .Filterable(false)
                                                              .Title("Thu")
                                                              .Format("{0:N0}");
                                                      columns.Bound(p => p.Friday)
                                                              .ClientTemplate("#= (Friday == 0) ? '' : kendo.format('{0:N0}', Friday/1000) #")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                              .Filterable(false)
                                                              .Title("Fri")
                                                              .Format("{0:N0}");

                                                  })
                                                        .AutoBind(false)
                                                        .Pageable(pager => pager
                                                        .Refresh(true))
                                                        .Sortable()
                                                        .Scrollable()
                                                        .Resizable(resizable => resizable.Columns(true))
                                                        .Filterable()
                                                        .HtmlAttributes(new { style = "height: 690px;" })
                                                        .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .PageSize(100)
                                                                .Read(read => read.Action("OutsSummaryWW_Read", "Grid").Data("additionalInfo")))
                                                        .Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                                        .ClientDetailTemplateId("client-template_OutsCGroups")
                                                        .ToHtmlString() + "</div>"
                                             );
                                        items.Add().Text("<span id='fontawesome5' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabShiftlyMovesToFG' style='font-weight:bold' >Shiftly Moves To FG</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Content("<div>" +

                                            @*"<br />" +

                                            "<button id='export' class='k-button'><span class='k-icon k-i-excel'></span>Export to Excel</button>" +
                                            
                                            "<br />" +*@
 "<br />" +

                                            Html.Kendo().Grid<ProductionDashboard.Models.fgActualsVsTargetWwSummaryPackageGroup1NEW>()
                                                        .Name("gridFGBalClass")
                                                        .Columns(columns =>
                                                        {

                                                            columns.Bound(p => p.WWTotalTarget)
                                                               .ClientTemplate("#= (WWTotalTarget == 0) ? '' : kendo.format('{0:N0}', WWTotalTarget) #")
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                               ;
                                                            columns.Bound(p => p.WWTotalActual)
                                                                .ClientTemplate("# if (WWTotalActual/1000 > WWTotalTarget ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:N0}', WWTotalActual/1000) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:N0}', WWTotalActual/1000) #</strong>" +
                                                                    "# } #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                ;
                                                            columns.Bound(p => p.Balance_To_Target).Title("Balance To Target")
                                                                .ClientTemplate("#= (Balance_To_Target == 0) ? '' : kendo.format('{0:N0}', Balance_To_Target/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.Attainment)
                                                                .ClientTemplate("#= (Attainment == 0) ? '' : kendo.format('{0:N0}', Attainment) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });

                                                        })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Read(read => read.Action("DashBoardFGBalWW_Read", "Grid").Data("additionalInfo")))
                                                        .ToHtmlString() +
                                            "<br />" +

                                            Html.Kendo()
                                              .Grid<ProductionDashboard.Models.fgTransposeClass>()
                                                      .Name("gridFGClass")
                                                      .ToolBar(tools => tools.Excel())
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.WorkShift)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Width(140)
                                                                .Filterable(false)
                                                                ;
                                                          columns.Bound(p => p.TargetQty)
                                                                .ClientTemplate("#= (TargetQty == 0) ? '' : kendo.format('{0:N.0}', TargetQty) #").Filterable(false)
                                                                .Format("{0:N0}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" })
                                                                ;
                                                          columns.Bound(p => p.TotalQty)
                                                                .ClientTemplate("# if (TotalQty/1000 > TargetQty ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:N0}', TotalQty/1000) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:N0}', TotalQty/1000) #</strong>" +
                                                                    "# } #")
                                                                .Filterable(false)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                ;
                                                          columns.Bound(p => p.Saturday)
                                                                .ClientTemplate("#= (Saturday == 0) ? '' : kendo.format('{0:N0}', Saturday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Sat")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Sunday)
                                                                .ClientTemplate("#= (Sunday == 0) ? '' : kendo.format('{0:N0}', Sunday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Sun")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Monday)
                                                                .ClientTemplate("#= (Monday == 0) ? '' : kendo.format('{0:N0}', Monday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Mon")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Tuesday)
                                                                .ClientTemplate("#= (Tuesday == 0) ? '' : kendo.format('{0:N0}', Tuesday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Tue")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Wednesday)
                                                                .ClientTemplate("#= (Wednesday == 0) ? '' : kendo.format('{0:N0}', Wednesday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Wed")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Thursday)
                                                                .ClientTemplate("#= (Thursday == 0) ? '' : kendo.format('{0:N0}', Thursday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Thu")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Friday)
                                                                .ClientTemplate("#= (Friday == 0) ? '' : kendo.format('{0:N0}', Friday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Fri")
                                                                .Format("{0:N0}")
                                                                ;
                                                      })
                                            .AutoBind(false)
                                            .Sortable()
                                            .Scrollable()
                                            .Resizable(resizable => resizable.Columns(true))
                                            .HtmlAttributes(new { style = "height: 160px;" })
                                            .DataSource(dataSource => dataSource
                                                  .Ajax()
                                                  .PageSize(20)
                                                  .Read(read => read.Action("DashBoardFG_Read", "Grid").Data("additionalInfo")))
                                            .Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                            .ToHtmlString() + "</div>" +

                                            "<div id='fgGroups'>" +

                                            Html.Kendo().Grid<ProductionDashboard.Models.fgActualsVsTargetWwSummaryProductGroupNEW>()
                                                        .Name("gridFGBalGroups")
                                                        .Columns(columns =>
                                                        {
                                                            columns.Bound(p => p.WWTotalTarget)
                                                               .ClientTemplate("#= (WWTotalTarget == 0) ? '' : kendo.format('{0:N0}', WWTotalTarget) #")
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                               ;
                                                            columns.Bound(p => p.WWTotalActual)
                                                                .ClientTemplate("# if (WWTotalActual/1000 > WWTotalTarget ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:N0}', WWTotalActual/1000) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:N0}', WWTotalActual/1000) #</strong>" +
                                                                    "# } #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                ;
                                                            columns.Bound(p => p.Balance_To_Target).Title("Balance To Target")
                                                                .ClientTemplate("#= (Balance_To_Target == 0) ? '' : kendo.format('{0:N0}', Balance_To_Target/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                ;
                                                            columns.Bound(p => p.Attainment)
                                                                .ClientTemplate("#= (Attainment == 0) ? '' : kendo.format('{0:N0}', Attainment) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                ;

                                                        })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Read(read => read.Action("DashBoardFGBalWW_Read", "Grid").Data("additionalInfo")))
                                                        .ToHtmlString() +
                                            "<br />" +


                                            Html.Kendo()
                                              .Grid<ProductionDashboard.Models.fgTransposeGroups>()
                                                      .Name("gridFGGroups")
                                                      .ToolBar(tools => tools.Excel())
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.WorkShift)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Width(140)
                                                                .Filterable(false)
                                                                ;
                                                          columns.Bound(p => p.TargetQty)
                                                                .ClientTemplate("#= (TargetQty == 0) ? '' : kendo.format('{0:N0}', TargetQty) #")
                                                                .Filterable(false)
                                                                .Format("{0:N0}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" })
                                                                ;
                                                          columns.Bound(p => p.TotalQty)
                                                                .ClientTemplate("# if (TotalQty/1000 > TargetQty ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:N0}', TotalQty/1000) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:N0}', TotalQty/1000) #</strong>" +
                                                                    "# } #")
                                                                .Filterable(false)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                ;
                                                          columns.Bound(p => p.Saturday)
                                                                .ClientTemplate("#= (Saturday == 0) ? '' : kendo.format('{0:N0}', Saturday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Sat")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Sunday)
                                                                .ClientTemplate("#= (Sunday == 0) ? '' : kendo.format('{0:N0}', Sunday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Sun")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Monday)
                                                                .ClientTemplate("#= (Monday == 0) ? '' : kendo.format('{0:N0}', Monday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Mon")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Tuesday)
                                                                .ClientTemplate("#= (Tuesday == 0) ? '' : kendo.format('{0:N0}', Tuesday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Tue")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Wednesday)
                                                                .ClientTemplate("#= (Wednesday == 0) ? '' : kendo.format('{0:N0}', Wednesday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Width(120)
                                                                .Title("Wed")
                                                                .Format("{0:N0}")
                                                                .Filterable(false)
                                                                ;
                                                          columns.Bound(p => p.Thursday)
                                                                .ClientTemplate("#= (Thursday == 0) ? '' : kendo.format('{0:N0}', Thursday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Thu")
                                                                .Format("{0:N0}")
                                                                ;
                                                          columns.Bound(p => p.Friday)
                                                                .ClientTemplate("#= (Friday == 0) ? '' : kendo.format('{0:N0}', Friday/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                .Filterable(false)
                                                                .Title("Fri")
                                                                .Format("{0:N0}")
                                                                ;
                                                      })
                                            .AutoBind(false)
                                            .Sortable()
                                            .Scrollable()
                                            .Resizable(resizable => resizable.Columns(true))
                                            .Filterable()
                                            .HtmlAttributes(new { style = "height: 160px;" })
                                            .DataSource(dataSource => dataSource
                                                  .Ajax()
                                                  .Read(read => read.Action("DashBoardFG_Read", "Grid").Data("additionalInfo")))
                                            .Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                            .ToHtmlString() + "</div>"

                                            );     //Add item with text "Item2")

                                        items.Add().Text("<span id='fontawesome6' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabEU' style='font-weight:bold'>Equipment Utilization</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Content("<div>" +

                                            Html.Kendo()
                                              .Grid<ProductionDashboard.Models.equipUtilTransposeWorkDayWTDParentClass>()
                                                      .Name("gridEquipUtilClass")
                                                      .ToolBar(tools => tools.Excel())
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.EquipClass).Visible(false);
                                                          columns.Bound(p => p.EquipmentPackageFamily)
                                                                  .ClientGroupHeaderTemplate("#=value#")
                                                                  .Visible(true).Hidden(true);
                                                          columns.Bound(p => p.EquipmentFamily)
                                                                  .ClientGroupHeaderTemplate("#=value#")
                                                                  .Visible(true).Hidden(true);
                                                          columns.Bound(p => p.Equipment)
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Width(150)
                                                                  ;
                                                          columns.Bound(p => p.WorkWeek).Visible(false);
                                                          columns.Bound(p => p.Target)
                                                                  .ClientTemplate("#= (Target == 0) ? '' : kendo.format('{0:P2}', Target) #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" })
                                                                  ;
                                                          columns.Bound(p => p.TotalHours)
                                                                  .ClientTemplate("# if (TotalHours > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', TotalHours) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', TotalHours) #</strong>" +
                                                                    "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("WTD")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Saturday)
                                                                  .ClientTemplate("# if (Saturday > Target ) { #" +
                                                                         "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Saturday) #</strong>" +
                                                                         "# } else { #" +
                                                                  "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Saturday) #</strong>" +
                                                                  "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Sat")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Sunday)
                                                                  .ClientTemplate("# if (Sunday > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Sunday) #</strong>" +
                                                                  "# } else { #" +
                                                           "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Sunday) #</strong>" +
                                                           "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Sun")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Monday)
                                                                  .ClientTemplate("# if (Monday > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Monday) #</strong>" +
                                                                  "# } else { #" +
                                                           "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Monday) #</strong>" +
                                                           "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Mon")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Tuesday)
                                                                  .ClientTemplate("# if (Tuesday > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Tuesday) #</strong>" +
                                                                  "# } else { #" +
                                                           "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Tuesday) #</strong>" +
                                                           "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Tue")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Wednesday)
                                                                  .ClientTemplate("# if (Wednesday > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Wednesday) #</strong>" +
                                                                  "# } else { #" +
                                                           "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Wednesday) #</strong>" +
                                                           "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Wed")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Thursday)
                                                                  .ClientTemplate("# if (Thursday > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Thursday) #</strong>" +
                                                                  "# } else { #" +
                                                           "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Thursday) #</strong>" +
                                                           "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Thu")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                          columns.Bound(p => p.Friday)
                                                                  .ClientTemplate("# if (Friday > Target ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Friday) #</strong>" +
                                                                  "# } else { #" +
                                                           "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Friday) #</strong>" +
                                                           "# } #")
                                                                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                  .Title("Fri")
                                                                  .Format("{0:P2}")
                                                                  ;
                                                      })
                                                .AutoBind(false)
                                                .Pageable()
                                                .Sortable()
                                                .Scrollable()
                                                .HtmlAttributes(new { style = "height: 690px;" })
                                                .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .Group(groups =>
                                                        {
                                                            groups.Add(p => p.EquipmentPackageFamily);
                                                            groups.Add(p => p.EquipmentFamily);
                                                        })
                                                .PageSize(100)
                                                        .Read(read => read.Action("EquipUtilSummary_Read", "Grid").Data("additionalInfo")))
                                                .Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                                .ClientDetailTemplateId("client-template_EUClass")  
                                                .ToHtmlString() + "</div>" +

                                                "<div id='gridEUGroups'>" +

                                              Html.Kendo().Grid<ProductionDashboard.Models.equipUtilTransposeWorkDayWTDParentGroup>()
                                                  .Name("gridEquipUtilGroups")
                                                  .ToolBar(tools => tools.Excel())
                                                  .Columns(columns =>
                                                  {
                                                      columns.Bound(p => p.EquipGroups).Visible(false);
                                                      columns.Bound(p => p.EquipmentPackageFamily)
                                                             .ClientGroupHeaderTemplate("#=value#")
                                                             .Visible(true).Hidden(true);
                                                      columns.Bound(p => p.EquipmentFamily)
                                                             .ClientGroupHeaderTemplate("#=value#")
                                                             .Visible(true).Hidden(true);
                                                      columns.Bound(p => p.Equipment)
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Width(150)
                                                             ;
                                                      columns.Bound(p => p.WorkWeek).Visible(false);
                                                      columns.Bound(p => p.Target)
                                                             .ClientTemplate("#= (Target == 0) ? '' : kendo.format('{0:P2}', Target) #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" })
                                                             ;
                                                      columns.Bound(p => p.TotalHours)
                                                             .ClientTemplate("# if (TotalHours > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', TotalHours) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', TotalHours) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("WTD")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Saturday)
                                                             .ClientTemplate("# if (Saturday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Saturday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Saturday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Sat")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Sunday)
                                                             .ClientTemplate("# if (Sunday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Sunday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Sunday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Sun")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Monday)
                                                             .ClientTemplate("# if (Monday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Monday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Monday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Mon")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Tuesday)
                                                             .ClientTemplate("# if (Tuesday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Tuesday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Tuesday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Tue")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Wednesday)
                                                             .ClientTemplate("# if (Wednesday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Wednesday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Wednesday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Wed")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Thursday)
                                                             .ClientTemplate("# if (Thursday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Thursday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Thursday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Thu")
                                                             .Format("{0:P2}")
                                                             ;
                                                      columns.Bound(p => p.Friday)
                                                             .ClientTemplate("# if (Friday > Target ) { #" +
                                                                "<strong style='color: limegreen'>#: kendo.format('{0:p2}', Friday) #</strong>" +
                                                                "# } else { #" +
                                                                "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', Friday) #</strong>" +
                                                                "# } #")
                                                             .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                             .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                             .Title("Fri")
                                                             .Format("{0:P2}")
                                                             ;
                                                  })
                                                .AutoBind(false)
                                                .Pageable()
                                                .Sortable()
                                                .Scrollable()
                                                .HtmlAttributes(new { style = "height: 690px;" })
                                                .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Group(groups =>
                                                            {
                                                                groups.Add(p => p.EquipmentPackageFamily);
                                                                groups.Add(p => p.EquipmentFamily);
                                                            })
                                                            .PageSize(100)
                                                            .Read(read => read.Action("EquipUtilSummary_Read", "Grid").Data("additionalInfo")))
                                                .Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                                .ClientDetailTemplateId("client-template_EUGroups")
                                                .ToHtmlString() + "</div>"


                                            );
                                    })
                                )
                                @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab4Test")                               //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.                                   
                                //    .Events(events => events
                                //    //.Show("onShowTab4")
                                //    //.Select("onSelectTab4")
                                //    //.Activate("onActivateTab4")
                                //    .ContentLoad("onContentLoadTab4")
                                //    .Error("onErrorTab4")
                                //)
                                    .Items(items =>
                                    {

                                        items.Add().Text("<span id='fontawesome7' style='font-weight:bold; color:white' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabOutsPerOperation1' style='font-weight:bold; color:white'>Outs per Operation</span>") //Add item with text "Item1")
                                           .Encoded(false)
                                           .Selected(true)
                                           .Content("<div>" +

                                           "<div id='gridOutsClass'>" +

                                           Html.Kendo()
                                               .Grid<dynamic>()
                                               .Name("gridOutsMonthClass")
                                               .ToolBar(tools => tools.Excel())
                                               .Excel(excel => excel.FileName("OutsperOp.xls"))
                                               .AutoBind(false)
                                               //.Columns(columns =>
                                               //{
                                               //    foreach (System.Data.DataColumn column in Model.Tables[4].Columns)
                                               //    {

                                               //        if (column.DataType != typeof(Int32))
                                               //        {
                                               //            columns.Bound(column.ColumnName)
                                               //                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold" })
                                               //                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                               //        }

                                               //        else
                                               //        {
                                               //            columns.Bound(typeof(Int32), column.ColumnName)
                                               //            .ClientTemplate("#= (" + column.ColumnName + ") == 0 ? '' : kendo.format('{0:N0}', (" + column.ColumnName + ")/1000) #")
                                               //            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold" })
                                               //            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                               //        }
                                               //    }
                                               //})
                                               .Selectable(selectable => selectable
                                               .Type(GridSelectionType.Row))
                                               .HtmlAttributes(new { style = "height: 690px;" })
                                               .Scrollable()
                                               .Pageable(pageable => pageable
                                               .Refresh(true)
                                               .PageSizes(true)
                                               .ButtonCount(5))
                                               .EnableCustomBinding(true)
                                               .DataSource(dataSource => dataSource
                                                   .Ajax()
                                                   //.Model(model =>
                                                   //{
                                                   //    foreach (System.Data.DataColumn column in Model.Tables[4].Columns)
                                                   //    {
                                                   //        model.Field(column.ColumnName, column.DataType);
                                                   //    }

                                                   //})

                                                    .Read(read => read.Action("SpDashboardOutsMonthPClass", "Home").Data("additionalInfo"))
                                                   .PageSize(100))
                                              //.ClientDetailTemplateId("client-template_dynamic_OutsClassJan")
                                              //.Events(e => e.DataBound("removeOutsClassCol"))
                                              //.Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                              .ToHtmlString() + "</div>" +

                                           "<div id='gridOutsGroups' >" +

                                                  Html.Kendo()
                                                 .Grid<dynamic>()
                                                 .Name("gridOutsMonthGroups")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("OutsperOp.xls"))
                                                 .AutoBind(false)
                                                 //.Columns(columns =>
                                                 //{

                                                 //    foreach (System.Data.DataColumn column in Model.Tables[3].Columns)
                                                 //    {

                                                 //        if (column.DataType != typeof(Int32))
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold" })
                                                 //                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                 //        }

                                                 //        else
                                                 //        {
                                                 //            columns.Bound(typeof(Int32), column.ColumnName)
                                                 //              .ClientTemplate("#= (" + column.ColumnName + ") == 0 ? '' : kendo.format('{0:N0}', (" + column.ColumnName + ")/1000) #")
                                                 //              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold" })
                                                 //              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                 //        }


                                                 //    }

                                                 //})

                                               .Selectable(selectable => selectable
                                               .Type(GridSelectionType.Row))
                                               .HtmlAttributes(new { style = "height: 690px;" })
                                               .Scrollable()
                                               //.ClientDetailTemplateId("client-template_dynamic_OutsGroupsJan")
                                               .Pageable(pageable => pageable
                                                   .PageSizes(true)
                                                   .Refresh(true)
                                                   .ButtonCount(5))
                                               .EnableCustomBinding(true)
                                               .DataSource(dataSource => dataSource
                                                   .Ajax()
                                                   //.Model(model =>
                                                   //{
                                                   //    foreach (System.Data.DataColumn column in Model.Tables[3].Columns)
                                                   //    {
                                                   //        model.Field(column.ColumnName, column.DataType);
                                                   //    }

                                                   //})

                                                    .Read(read => read.Action("SpDashboardOutsMonthPGroups", "Home").Data("additionalInfo"))
                                                   .PageSize(100)
                                                   )

                                              //.Events(e => e.DataBound("removeOutsCol"))
                                              //.Events(events => events.ExcelExport("excelFileNameYearWeek"))
                                              .ToHtmlString() + "</div>" +

                                              "</div>");

                                        items.Add().Text("<span id='fontawesome8' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabShiftlyMovesToFG1'  style='font-weight:bold'>Shiftly Moves To FG</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Content("<div>" +

                                            "<div>" +

                                            Html.Kendo().Grid<ProductionDashboard.Models.fgActualsVsTargetMonthlySummaryPackageGroup1NEW>()
                                                        .Name("gridFGMoBalClass")
                                                        .Columns(columns =>
                                                        {

                                                            columns.Bound(p => p.MonthlyTotalTarget)
                                                                .ClientTemplate("#= (MonthlyTotalTarget == 0) ? '' : kendo.format('{0:N0}', MonthlyTotalTarget) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.MonthlyTotalActual)
                                                                .ClientTemplate("# if (MonthlyTotalActual/1000 > MonthlyTotalTarget ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:N0}', MonthlyTotalActual/1000) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:N0}', MonthlyTotalActual/1000) #</strong>" +
                                                                    "# } #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.Balance_To_Target).Title("Balance To Target")
                                                                .ClientTemplate("#= (Balance_To_Target == 0) ? '' : kendo.format('{0:N0}', Balance_To_Target/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.Attainment)
                                                                .ClientTemplate("#= (Attainment == 0) ? '' : kendo.format('{0:N0}', Attainment) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });

                                                        })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Read(read => read.Action("DashBoardFGBalMo_Read", "Grid").Data("additionalInfo")))
                                                        .ToHtmlString() +

                                            "</div> <br />" +

                                             "<div>" +

                                            Html.Kendo().Grid<ProductionDashboard.Models.fgActualsVsTargetMonthlySummaryProductGroupNEW>()
                                                        .Name("gridFGMoBalGroups")
                                                        .Columns(columns =>
                                                        {
                                                            columns.Bound(p => p.MonthlyTotalTarget)
                                                                .ClientTemplate("#= (MonthlyTotalTarget == 0) ? '' : kendo.format('{0:N0}', MonthlyTotalTarget) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.MonthlyTotalActual)
                                                                .ClientTemplate("# if (MonthlyTotalActual/1000 > MonthlyTotalTarget ) { #" +
                                                                  "<strong style='color: limegreen'>#: kendo.format('{0:N0}', MonthlyTotalActual/1000) #</strong>" +
                                                                  "# } else { #" +
                                                                    "<strong style='color: Red'><strong>#: kendo.format('{0:N0}', MonthlyTotalActual/1000) #</strong>" +
                                                                    "# } #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.Balance_To_Target).Title("Balance To Target")
                                                                .ClientTemplate("#= (Balance_To_Target == 0) ? '' : kendo.format('{0:N0}', Balance_To_Target/1000) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                            columns.Bound(p => p.Attainment)
                                                                .ClientTemplate("#= (Attainment == 0) ? '' : kendo.format('{0:N0}', Attainment) #")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });

                                                        })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Read(read => read.Action("DashBoardFGBalMo_Read", "Grid").Data("additionalInfo")))
                                                        .ToHtmlString() +

                                            "</div> <br />" +

                                            "<div id='gridClassFg'>" +

                                            Html.Kendo().Grid<dynamic>()
                                                 .Name("gridFgMonthClass")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("FGperClass.xls"))
                                                 //.Columns(columns =>
                                                 //{
                                                 //    foreach (System.Data.DataColumn column in Model.Tables[6].Columns)
                                                 //    {


                                                 //        if ((column.ColumnName).Trim().Contains("_Target_Qty"))
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .Title("Target")
                                                 //                  .Format("{0:N0}")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; color: Blue; font-size:small;" })
                                                 //                  ;
                                                 //        }
                                                 //        else if (column.DataType == typeof(Int32))
                                                 //        {

                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientTemplate("#= workWeekDetails(data, '" + column.ColumnName + "') #")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                 //                  ;
                                                 //        }
                                                 //        else
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                 //                  ;
                                                 //        }


                                                 //    }

                                                 //})
                                                  .AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 690px;" })
                                                  .Scrollable()
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Model(model =>
                                                            //{
                                                            //    foreach (System.Data.DataColumn column in Model.Tables[6].Columns)
                                                            //    {
                                                            //        model.Field(column.ColumnName, column.DataType);

                                                            //    }

                                                            //})
                                                            .Read(read => read.Action("SpDashboardFgMonthClass", "Home").Data("additionalInfo")))
                                                  .ToHtmlString() + "</div>" +

                                            "<div id='gridGroupsFg'>" +

                                            Html.Kendo().Grid<dynamic>()
                                                 .Name("gridFgMonthGroups")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("FGperGroups.xls"))
                                                 //.Columns(columns =>
                                                 //{
                                                 //    foreach (System.Data.DataColumn column in Model.Tables[5].Columns)
                                                 //    {


                                                 //        if ((column.ColumnName).Trim().Contains("_Target_Qty"))
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .Title("Target")
                                                 //                  .Format("{0:N0}")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; color: Blue; font-size:small;" })
                                                 //                  ;
                                                 //        }
                                                 //        else if (column.DataType == typeof(Int32))
                                                 //        {

                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientTemplate("#= workWeekDetails(data, '" + column.ColumnName + "') #")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                 //                  ;
                                                 //        }
                                                 //        else
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                 //                  ;
                                                 //        }


                                                 //    }

                                                 //})
                                                  .AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 690px;" })
                                                  .Scrollable()
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Model(model =>
                                                            //{
                                                            //    foreach (System.Data.DataColumn column in Model.Tables[5].Columns)
                                                            //    {
                                                            //        model.Field(column.ColumnName, column.DataType);
                                                            //    }

                                                            //})
                                                            .Read(read => read.Action("SpDashboardFgMonthGroups", "Home").Data("additionalInfo")))
                                                  .ToHtmlString() + "</div>" +

                                            "</div>");

                                        items.Add().Text("<span id='fontawesome9' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabEU' style='font-weight:bold'>Equipment Utilization</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Content("<div>" +

                                            "<div id='gridEUClass'>" +

                                                Html.Kendo()
                                                  .Grid<dynamic>()
                                                  .Name("gridEUMonthClass")
                                                  .ToolBar(tools => tools.Excel())
                                                  .Excel(excel => excel.FileName("EquipUtil.xls"))
                                                  .AutoBind(false)
                                                  //.Columns(columns =>
                                                  //{

                                                  //    foreach (System.Data.DataColumn column in Model.Tables[2].Columns)
                                                  //    {

                                                  //        if ((column.ColumnName).Trim() == "EquipmentPackageFamily")
                                                  //        {
                                                  //            columns.Bound("EquipmentPackageFamily")
                                                  //                  .ClientGroupHeaderTemplate("#=value#")
                                                  //                  .Visible(true).Hidden(true)
                                                  //                  .HtmlAttributes(new { style = "text-align: center" });
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "EquipmentFamily")
                                                  //        {
                                                  //            columns.Bound("EquipmentFamily")
                                                  //                  .ClientGroupHeaderTemplate("#=value#")
                                                  //                  .Visible(true).Hidden(true)
                                                  //                  .HtmlAttributes(new { style = "text-align: center" });
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "EquipClass")
                                                  //        {
                                                  //            columns.Bound("EquipClass")
                                                  //                  .Visible(false);
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "ParentVendorModel")
                                                  //        {
                                                  //            columns.Bound("ParentVendorModel")
                                                  //                  .Visible(false);
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "Classification")
                                                  //        {
                                                  //            columns.Bound("Classification")
                                                  //                  .Visible(false);
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim().Contains("Target"))
                                                  //        {
                                                  //            columns.Bound(typeof(Int32), column.ColumnName)
                                                  //                  .ClientTemplate("#= (" + column.ColumnName + ") == 0 ? '' : kendo.format('{0:p2}', " + column.ColumnName + ") #")
                                                  //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                  //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" });
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim().Contains("WW"))
                                                  //        {
                                                  //            columns.Bound(typeof(Int32), column.ColumnName)
                                                  //                  .ClientTemplate("# if ((" + column.ColumnName + ") > Target ) { #" +
                                                  //                      "<strong style='color: limegreen'>#: kendo.format('{0:p2}', (" + column.ColumnName + ")/168) #</strong>" +
                                                  //                      "# } else { #" +
                                                  //                      "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', (" + column.ColumnName + ")/168) #</strong>" +
                                                  //                      "# } #")
                                                  //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                  //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                  //                  ;
                                                  //        }

                                                  //        else
                                                  //        {
                                                  //            columns.Bound(column.ColumnName)
                                                  //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                  //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                  //        }


                                                  //    }

                                                  //})

                                                .Selectable(selectable => selectable
                                                .Type(GridSelectionType.Row))
                                                .HtmlAttributes(new { style = "height: 690px;" })
                                                .Scrollable()
                                                .Pageable(pageable => pageable
                                                .Refresh(true)
                                                .PageSizes(true)
                                                .ButtonCount(5))
                                                .EnableCustomBinding(true)
                                                .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                //    .Model(model =>
                                                //    {
                                                //        foreach (System.Data.DataColumn column in Model.Tables[2].Columns)
                                                //        {
                                                //            model.Field(column.ColumnName, column.DataType);
                                                //        }

                                                //    })
                                                //    .Group(g =>
                                                //    {
                                                //        g.Add("EquipmentPackageFamily", typeof(string));
                                                //        g.Add("EquipmentFamily", typeof(string));
                                                //    })
                                                    .Read(read => read.Action("SpDashboardEUMonthPClass", "Home").Data("additionalInfo"))
                                                    .PageSize(100))
                                                //.ClientDetailTemplateId("client-template_EUChildClassJan")
                                                .ToHtmlString() + "</div>" +

                                            "<div id='gridEGroups'>" +

                                                Html.Kendo()
                                                  .Grid<dynamic>()
                                                  .Name("gridEUMonthGroups")
                                                  .ToolBar(tools => tools.Excel())
                                                  .Excel(excel => excel.FileName("EquipUtil.xls"))
                                                  .AutoBind(false)
                                                  //.Columns(columns =>
                                                  //{

                                                  //    foreach (System.Data.DataColumn column in Model.Tables[1].Columns)
                                                  //    {
                                                  //        if ((column.ColumnName).Trim() == "EquipmentPackageFamily")
                                                  //        {
                                                  //            columns.Bound("EquipmentPackageFamily")
                                                  //                  .ClientGroupHeaderTemplate("#=value#")
                                                  //                  .Visible(true).Hidden(true)
                                                  //                  .HtmlAttributes(new { style = "text-align: center" });
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "EquipmentFamily")
                                                  //        {
                                                  //            columns.Bound("EquipmentFamily")
                                                  //                  .ClientGroupHeaderTemplate("#=value#")
                                                  //                  .Visible(true).Hidden(true)
                                                  //                  .HtmlAttributes(new { style = "text-align: center" });
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "EquipGroups")
                                                  //        {
                                                  //            columns.Bound("EquipGroups")
                                                  //                  .Visible(false);
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "ParentVendorModel")
                                                  //        {
                                                  //            columns.Bound("ParentVendorModel")
                                                  //                  .Visible(false);
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim() == "Groupings")
                                                  //        {
                                                  //            columns.Bound("Groupings")
                                                  //                  .Visible(false);
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim().Contains("Target"))
                                                  //        {
                                                  //            columns.Bound(typeof(Int32), column.ColumnName)
                                                  //                  .ClientTemplate("#= (" + column.ColumnName + ") == 0 ? '' : kendo.format('{0:p2}', " + column.ColumnName + ") #")
                                                  //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                  //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" });
                                                  //        }

                                                  //        else if ((column.ColumnName).Trim().Contains("WW"))
                                                  //        {
                                                  //            columns.Bound(typeof(Int32), column.ColumnName)
                                                  //                  .ClientTemplate("# if ((" + column.ColumnName + ") > Target ) { #" +
                                                  //                      "<strong style='color: limegreen'>#: kendo.format('{0:p2}', (" + column.ColumnName + ")/168) #</strong>" +
                                                  //                      "# } else { #" +
                                                  //                      "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', (" + column.ColumnName + ")/168) #</strong>" +
                                                  //                      "# } #")
                                                  //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                  //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                  //                  ;
                                                  //        }

                                                  //        else
                                                  //        {
                                                  //            columns.Bound(column.ColumnName)
                                                  //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                  //                  .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                                                  //        }
                                                  //    }

                                                  //})

                                                .Selectable(selectable => selectable
                                                .Type(GridSelectionType.Row))
                                                .HtmlAttributes(new { style = "height: 690px;" })
                                                .Scrollable()
                                                .Pageable(pageable => pageable
                                                .Refresh(true)
                                                .PageSizes(true)
                                                .ButtonCount(5))
                                                .EnableCustomBinding(true)
                                                .DataSource(dataSource => dataSource
                                                    .Ajax()
                                               //     .Model(model =>
                                               //     {
                                               //         foreach (System.Data.DataColumn column in Model.Tables[1].Columns)
                                               //         {
                                               //             model.Field(column.ColumnName, column.DataType);
                                               //         }

                                               //     })
                                               //      .Group(g =>
                                               //      {
                                               //          g.Add("EquipmentPackageFamily", typeof(string));
                                               //          g.Add("EquipmentFamily", typeof(string));
                                               //      })
                                                    .Read(read => read.Action("SpDashboardEUMonthPGroupsJan", "Home").Data("additionalInfo"))
                                                    .PageSize(100))
                                               //.ClientDetailTemplateId("client-template_EUChildGroupsJan")
                                               .ToHtmlString() + "</div>"

                                               );
                                    })
                                )
                                @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab5Assy")       //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab5")
                                    .Select("onSelectTab5")
                                    .Activate("onActivateTab5")
                                    .ContentLoad("onContentLoadTab5")
                                    .Error("onErrorTab5")
                                    )
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span id='assyFontAwesomeText' style='font-weight:bold; color: white' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabAssy3001Font' style='font-weight: Bold; color: white'>Outs 3001</span>")
                                                .Encoded(false)
                                                .Selected(true)
                                                .Content("<div>" +

                                                 Html.Kendo().Grid<dynamic>()
                                                 .Name("gridAssyOutput3001")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("Outs3001.xls"))
                                                 //.Columns(columns =>
                                                 //{
                                                 //    foreach (System.Data.DataColumn column in Model.Tables[12].Columns)
                                                 //    {

                                                 //        if ((column.ColumnName).Trim() == "ProductGroup")
                                                 //        {
                                                 //            columns.Bound("ProductGroup")
                                                 //               .ClientGroupHeaderTemplate("#=value#")
                                                 //               .Visible(true)
                                                 //               .Hidden(true)
                                                 //               ;
                                                 //        }
                                                 //        else if ((column.ColumnName).Trim() == "PackageGroup")
                                                 //        {
                                                 //            columns.Bound("PackageGroup")
                                                 //               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //               .HtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                 //               .ClientGroupFooterTemplate("Total : ")
                                                 //               .ClientFooterTemplate("Grand Total : ")
                                                 //               .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                 //               .Width(150);
                                                 //        }

                                                 //        else if ((column.ColumnName).Trim().Contains("_Target_Qty"))
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum)#")
                                                 //                  .ClientGroupFooterTemplate("#:kendo.format('{0:N0}', sum) #")
                                                 //                  .Title("Target")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-size:small; font-weight: bold; color: Blue;" })
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .Width(100);
                                                 //        }
                                                 //        else
                                                 //        {
                                                 //            columns.Bound(column.ColumnName)
                                                 //                  .ClientTemplate("#= workWeekDetails(data, '" + column.ColumnName + "') #")
                                                 //                  .ClientGroupFooterTemplate("#:kendo.format('{0:N0}', sum/1000) #")
                                                 //                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                                 //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                 //                  .HtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                 //                  .Width(100);
                                                 //        }
                                                 //    }
                                                 //})
                                                  .AutoBind(false)           
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 690px;" })
                                                  .Scrollable()
                                                  .Pageable(pageable => pageable
                                                  .Refresh(true)
                                                  .PageSizes(true)
                                                  .ButtonCount(5))
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Model(model =>
                                                            //{
                                                            //    foreach (System.Data.DataColumn column in Model.Tables[12].Columns)
                                                            //    {
                                                            //        model.Field(column.ColumnName, column.DataType);

                                                            //    }

                                                            //}) // End of Model

                                                            //.Aggregates(aggregates =>
                                                            //{

                                                            //    foreach (System.Data.DataColumn column in Model.Tables[12].Columns)
                                                            //    {
                                                            //        if ((column.ColumnName).Trim().Contains("WW"))
                                                            //        {
                                                            //            aggregates.Add(column.ColumnName, typeof(Int32?)).Sum();
                                                            //        }

                                                            //    }

                                                            //}) // End of Aggregates

                                                            //.Group(g => g.Add("ProductGroup", typeof(string)))
                                                            .Read(read => read.Action("SpDashboardAssyOutput3001", "Home"))
                                                            .PageSize(100))

                                                  .ToHtmlString() + "</div>"
                                                  ); // End of Outs Tab  

                                        items.Add().Text("<span id='assyFontAwesomeText1' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabAssy3995Font' style='font-weight: Bold;'>Outs 3995</span>")
                                                    .Encoded(false)
                                                    .Content("<div>" +

                                                     Html.Kendo().Grid<dynamic>()
                                                     .Name("gridAssyOutput3995")
                                                     .ToolBar(tools => tools.Excel())
                                                     .Excel(excel => excel.FileName("Outs3995.xls"))
                                                     //.Columns(columns =>
                                                     //{
                                                     //    foreach (System.Data.DataColumn column in Model.Tables[13].Columns)
                                                     //    {

                                                     //        if ((column.ColumnName).Trim() == "ProductGroup")
                                                     //        {
                                                     //            columns.Bound("ProductGroup")
                                                     //               .ClientGroupHeaderTemplate("#=value#")
                                                     //               .Visible(true)
                                                     //               .Hidden(true)
                                                     //               ;
                                                     //        }
                                                     //        else if ((column.ColumnName).Trim() == "PackageGroup")
                                                     //        {
                                                     //            columns.Bound("PackageGroup")
                                                     //               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                     //               .HtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                     //               .ClientGroupFooterTemplate("Total : ")
                                                     //               .ClientFooterTemplate("Grand Total : ")
                                                     //               .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                     //               .Width(150);
                                                     //        }

                                                     //        else if ((column.ColumnName).Trim().Contains("_Target_Qty"))
                                                     //        {
                                                     //            columns.Bound(column.ColumnName)
                                                     //                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum)#")
                                                     //                  .ClientGroupFooterTemplate("#:kendo.format('{0:N0}', sum) #")
                                                     //                  .Title("Target")
                                                     //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                     //                  .HtmlAttributes(new { style = "text-align: center; font-size:small; font-weight: bold; color: Blue;" })
                                                     //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                     //                  .Width(100);
                                                     //        }
                                                     //        else
                                                     //        {
                                                     //            columns.Bound(column.ColumnName)
                                                     //                  .ClientTemplate("#= workWeekDetails(data, '" + column.ColumnName + "') #")
                                                     //                  .ClientGroupFooterTemplate("#:kendo.format('{0:N0}', sum/1000) #")
                                                     //                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                                     //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                     //                  .HtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                     //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                     //                  .Width(100);
                                                     //        }
                                                     //    }
                                                     //})
                                                      .AutoBind(false)
                                                      .Selectable(selectable => selectable
                                                      .Type(GridSelectionType.Row))
                                                      .HtmlAttributes(new { style = "height: 690px;" })
                                                      .Scrollable()
                                                      .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                //.Model(model =>
                                                                //{
                                                                //    foreach (System.Data.DataColumn column in Model.Tables[13].Columns)
                                                                //    {
                                                                //        model.Field(column.ColumnName, column.DataType);

                                                                //    }

                                                                //}) // End of Model

                                                                //.Aggregates(aggregates =>
                                                                //{

                                                                //    foreach (System.Data.DataColumn column in Model.Tables[13].Columns)
                                                                //    {
                                                                //        if ((column.ColumnName).Trim().Contains("WW"))
                                                                //        {
                                                                //            aggregates.Add(column.ColumnName, typeof(Int32?)).Sum();
                                                                //        }

                                                                //    }

                                                                //}) // End of Aggregates

                                                                //.Group(g => g.Add("ProductGroup", typeof(string)))
                                                                .Read(read => read.Action("SpDashboardAssyOutput3995", "Home"))
                                                                .PageSize(100))

                                                      .ToHtmlString() + "</div>"
                                                      ); // End of Outs Tab 

                                        items.Add().Text("<span id='assyFontAwesomeText2' style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span id='tabAssy6000Font' style='font-weight: Bold;'>Outs 6000</span>")

                                                    .Encoded(false)
                                                    .Content("<div>" +

                                                     Html.Kendo().Grid<dynamic>()
                                                     .Name("gridAssyOutput6000")
                                                     .ToolBar(tools => tools.Excel())
                                                     .Excel(excel => excel.FileName("Outs6000.xls"))
                                                     //.Columns(columns =>
                                                     //{
                                                     //    foreach (System.Data.DataColumn column in Model.Tables[14].Columns)
                                                     //    {

                                                     //        if ((column.ColumnName).Trim() == "ProductGroup")
                                                     //        {
                                                     //            columns.Bound("ProductGroup")
                                                     //               .ClientGroupHeaderTemplate("#=value#")
                                                     //               .Visible(true)
                                                     //               .Hidden(true)
                                                     //               ;
                                                     //        }
                                                     //        else if ((column.ColumnName).Trim() == "PackageGroup")
                                                     //        {
                                                     //            columns.Bound("PackageGroup")
                                                     //               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                     //               .HtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                     //               .ClientGroupFooterTemplate("Total : ")
                                                     //               .ClientFooterTemplate("Grand Total : ")
                                                     //               .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                                                     //               .Width(150);
                                                     //        }

                                                     //        else if ((column.ColumnName).Trim().Contains("_Target_Qty"))
                                                     //        {
                                                     //            columns.Bound(column.ColumnName)
                                                     //                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum)#")
                                                     //                  .ClientGroupFooterTemplate("#:kendo.format('{0:N0}', sum) #")
                                                     //                  .Title("Target")
                                                     //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                     //                  .HtmlAttributes(new { style = "text-align: center; font-size:small; font-weight: bold; color: Blue;" })
                                                     //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                     //                  .Width(100);
                                                     //        }
                                                     //        else
                                                     //        {
                                                     //            columns.Bound(column.ColumnName)
                                                     //                  .ClientTemplate("#= workWeekDetails(data, '" + column.ColumnName + "') #")
                                                     //                  .ClientGroupFooterTemplate("#:kendo.format('{0:N0}', sum/1000) #")
                                                     //                  .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                                     //                  .HeaderHtmlAttributes(new { style = "text-align: center; font-weight: bold;" })
                                                     //                  .HtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                     //                  .FooterHtmlAttributes(new { style = "text-align: center; font-weight: bold; font-size:small;" })
                                                     //                  .Width(100);
                                                     //        }
                                                     //    }
                                                     //})
                                                      .AutoBind(false)
                                                      .Selectable(selectable => selectable
                                                      .Type(GridSelectionType.Row))
                                                      .HtmlAttributes(new { style = "height: 690px;" })
                                                      .Scrollable()
                                                      .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                //.Model(model =>
                                                                //{
                                                                //    foreach (System.Data.DataColumn column in Model.Tables[14].Columns)
                                                                //    {
                                                                //        model.Field(column.ColumnName, column.DataType);

                                                                //    }

                                                                //}) // End of Model

                                                                //.Aggregates(aggregates =>
                                                                //{

                                                                //    foreach (System.Data.DataColumn column in Model.Tables[14].Columns)
                                                                //    {
                                                                //        if ((column.ColumnName).Trim().Contains("WW"))
                                                                //        {
                                                                //            aggregates.Add(column.ColumnName, typeof(Int32?)).Sum();
                                                                //        }

                                                                //    }

                                                                //}) // End of Aggregates

                                                                //.Group(g => g.Add("ProductGroup", typeof(string)))
                                                                .Read(read => read.Action("SpDashboardAssyOutput6000", "Home"))
                                                                .PageSize(100))

                                                      .ToHtmlString() + "</div>"
                                                      ); // End of Outs Tab                                              
                                    })

                                        )
                                @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab6Test")       //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .Events(events => events
                                    .Show("onShowTab6")
                                    .Select("onSelectTab6")
                                    .Activate("onActivateTab6")
                                    .ContentLoad("onContentLoadTab6")
                                    .Error("onErrorTab6"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold; color: white' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span style='font-weight:bold; color:white'>Shiftly WIP Inventory</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<div>" +

                                            Html.Kendo().Grid<ProductionDashboard.Models.wipPackageGroup1NEW>()

                                                      .Name("gridWIPClass")
                                                      .ToolBar(tools => tools.Excel())
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.AsOf)
                                                              .ClientGroupHeaderTemplate("#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>")
                                                              .Visible(true).Hidden(true)
                                                              .Title("As of")
                                                              ;
                                                          columns.Bound(p => p.PackageGroup2)
                                                              .ClientGroupHeaderTemplate("#=value#")
                                                              .Visible(true).Hidden(true)
                                                              ;
                                                          columns.Bound(p => p.PackageGroup3)
                                                              .ClientGroupHeaderTemplate("#=value#")
                                                              .Visible(true).Hidden(true)
                                                              ;
                                                          columns.Bound(p => p.Operation)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                              .Width(300)
                                                              .ClientFooterTemplate("Total : ")
                                                              .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                              ;
                                                          columns.Bound(p => p.Qty)
                                                          .Width(600)
                                                          .Filterable(false)
                                                          .Format("{0:N0}")
                                                          .HeaderHtmlAttributes(new { style = "text-align: left; font-weight:bold;" })
                                                          .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                          .ClientTemplate("#= (Qty == 0) ? '' : kendo.format('{0:N0}', Qty/1000) #")
                                                          .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                                          .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                          ;

                                                      })
                                                        .AutoBind(false)
                                                        .Sortable()
                                                        .Scrollable()
                                                        .Resizable(resizable => resizable.Columns(true))
                                                        .Filterable()
                                                        .HtmlAttributes(new { style = "height: 690px;" })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Aggregates(aggregates =>
                                                            {
                                                                aggregates.Add(p => p.Qty).Sum();

                                                            }) // End of Aggregates
                                                            .Group(g =>
                                                            {
                                                                g.Add(p => p.AsOf);
                                                                g.Add(p => p.PackageGroup2);
                                                                g.Add(p => p.PackageGroup3);
                                                            })
                                                            .PageSize(100)
                                                            .Read(read => read.Action("DashBoardWip_Read", "Grid").Data("additionalInfo")))
                                                        .Events(events => events.ExcelExport("excelFileName"))
                                                        .Events(events => events.DataBound("removeWipHeader"))
                                                        .ToHtmlString() + "</div>" + "<div>" +

                                            Html.Kendo().Grid<ProductionDashboard.Models.wipProductGroupNEW>()
                                                      .Name("gridWIPGroups")
                                                      .ToolBar(tools => tools.Excel())
                                                      .Columns(columns =>
                                                      {
                                                          columns.Bound(p => p.AsOf)
                                                              .ClientGroupHeaderTemplate("#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>")
                                                              .Visible(true).Hidden(true)
                                                              .Title("As of")
                                                              ;
                                                          columns.Bound(p => p.Operation)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                              .Width(300)
                                                              .ClientFooterTemplate("Total : ")
                                                              .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                              ;
                                                          columns.Bound(p => p.Qty)
                                                              .Width(600)
                                                              .Filterable(false)
                                                              .Format("{0:N0}")
                                                              .HeaderHtmlAttributes(new { style = "text-align: left; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                              .ClientTemplate("#= (Qty == 0) ? '' : kendo.format('{0:N0}', Qty/1000) #")
                                                              .ClientFooterTemplate("#:kendo.format('{0:N0}', sum/1000)#")
                                                              .FooterHtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                                                              ;
                                                      })
                                                        .AutoBind(false)
                                                        .Sortable()
                                                        .Scrollable()
                                                        .Resizable(resizable => resizable.Columns(true))
                                                        .Filterable()
                                                        .HtmlAttributes(new { style = "height: 690px;" })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .Aggregates(aggregates =>
                                                            {
                                                                aggregates.Add(p => p.Qty).Sum();

                                                            }) // End of Aggregates
                                                            .Group(g => g.Add(p => p.AsOf))
                                                            .PageSize(100)
                                                            .Read(read => read.Action("DashBoardWip_Read", "Grid").Data("additionalInfo")))
                                                       .Events(events => events.ExcelExport("excelFileName"))
                                                       .ToHtmlString() + "</div>"
                                                );
                                    })
                                )

                                  @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab7Assy")       //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .Events(events => events
                                    .Show("onShowTab6")
                                    .Select("onSelectTab6")
                                    .Activate("onActivateTab6")
                                    .ContentLoad("onContentLoadTab6")
                                    .Error("onErrorTab6"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold;' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<span style='font-weight:bold'>WIP</span>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<div>" +

                                                Html.Kendo().Grid<dynamic>()
                                                 .Name("gridAssyWip")
                                                 .ToolBar(tools => tools.Excel())
                                                 .Excel(excel => excel.FileName("AssyWIP.xls"))
                                                 //.Columns(columns =>
                                                 //{
                                                 //    foreach (System.Data.DataColumn column in Model.Tables[16].Columns)
                                                 //    {

                                                 //        if ((column.ColumnName).Trim() == "Operation")
                                                 //        {
                                                 //            columns.Bound("Operation");
                                                 //        }

                                                 //        else
                                                 //        {
                                                 //            columns.Bound(column.ColumnName);

                                                 //        }

                                                 //    }

                                                 //})
                                                 // .AutoBind(false)
                                                  .Selectable(selectable => selectable
                                                  .Type(GridSelectionType.Row))
                                                  .HtmlAttributes(new { style = "height: 690px;" })
                                                  .Scrollable()
                                                  .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Model(model =>
                                                            //{
                                                            //    foreach (System.Data.DataColumn column in Model.Tables[16].Columns)
                                                            //    {
                                                            //        model.Field(column.ColumnName, column.DataType);

                                                            //    }
                                                            //}) // End of Model  
                                                            .PageSize(100)
                                                            .Read(read => read.Action("SpDashboardAssyWIP", "Home").Data("additionalInfo")))
                                                  .ToHtmlString() + "</div>"
                                                );
                                    })
                                )
                            </div>);

                    }).ToHtmlString() + "</div>"
                );

                //Debug console
                verticalPanes.Add()
                .HtmlAttributes(new { id = "bottom-pane" })
                .Scrollable(true)
                .Collapsed(true)
                .Collapsible(true)
                .MaxSize("145px")
                .MinSize("130px")
                .Size("145px")
                .Content("<div style='padding-top: 8px; padding-left: 8px; padding-bottom: 2px; padding-right: 8px; overflow:hidden; '>Debuging Console<div class='console'></div></div>");
            })
                                                                         )
        @* End of Splitter  *@
    </div>
    @(Html.Kendo().Tooltip()
        .For("#treeviewMenu")
        .Filter("li span.k-in")
        .Position(TooltipPosition.Right)
        .Content("Loading...")
        .Width(200)
        .Events(events => events.Hide("onHideTooltip").Show("onShowTooltip"))
    )
    @(Html.Kendo().Tooltip()
        .For("#treeviewMonthly")
        .Filter("li span.k-in")
        .Position(TooltipPosition.Right)
        .Content("Loading...")
        .Width(200)
        .Events(events => events.Hide("onHideTooltipMonth").Show("onShowTooltipMonth"))
    )
    <script type="text/javascript">
        var treeviewMain;   // Treeview Menu
        var treeviewMonthly;   // Treeview Monthly

        var splitterElement;

        // Treeview  groupings
        var testGrouping;              
        var assemblyGrouping;      

        // Array variables
        var testGroups;
        var assemblyGroups;
        
       
        //------- Start Tooltip -----------------------------------------------------------------------------------------
        function onShowTooltip(e) {
            kendoConsole.log("event :: show tooltip");

            var tooltip = this;
            var text = treeviewMain.text(tooltip.target());

    //            // get the title attributes on the node. 
    //            var title = treeviewMain.element.context.title;

    //            tooltip.content.text((title.length > 0 ? title : "Tooltip for: " + text));

            tooltip.content.text("Display " + text + " data.");
        }

        function onHideTooltip(e) {
            kendoConsole.log("event :: hide tooltip");
        }

         function onShowTooltipMonth(e) {         
            var tooltip = this;
            var text = treeviewMonthly.text(tooltip.target());

            if(text.indexOf("WW") > -1)
            {
               tooltip.content.text("Display weekly data for Outs, FG, EquipUtil.");
            }
            else
            {
              tooltip.content.text("Display monthly data for Outs, FG, EquipUtil.");            
            }
          }

        function onHideTooltipMonth(e) {
            kendoConsole.log("event :: hide tooltipMonth");

        }
        //------- End Tooltip -----------------------------------------------------------------------------------------




         //------- Start Splitter Resize -----------------------------------------------------------------------------------------        
            var resizeSplitter = function() {                
                var windowwidth = $(window).width();
                var windowheight = $(window).height() - 50;

                // Resize Main Div
                var $maindiv = $('#mainDiv');    // .. make current size permanent. 
                $maindiv.css({
                    width:  windowwidth,
                    height: windowheight
                });
                
                var $renderDiv = $('#renderBodyDiv');    // .. make current size permanent. 
                $renderDiv.css({
            
                    height: windowheight - 50
                });


                // resize main splitter element
                var $splitter = $("#mainSplitter");
                $splitter.css("height", windowheight - 23 + "px");                
                
                // Resize    
                $splitter.data("kendoSplitter").resize();
            };

           function resizeGrid(gridName) {
            var gridElement = $(gridName);              
            var dataArea = gridElement.find(".k-grid-content");

            var newGridHeight = $(document).height() - 140;
            var newDataAreaHeight = newGridHeight - 50;

            dataArea.height(newDataAreaHeight);
            gridElement.height(newGridHeight);

//            gridElement.data("kendoGrid").refresh();
        }   

        $(window).resize(function() {
            resizeSplitter();
            resizeGrid("#gridTestOutput");
            resizeGrid("#gridTestYield");
            resizeGrid("#gridAssyOutput3001");  
            resizeGrid("#gridAssyOutput3995");            
            resizeGrid("#gridAssyOutput6000");                      
            resizeGrid("#gridOutsPClass");
            resizeGrid("#gridOutsPGroups"); 
            resizeGrid("#gridFGClass");  
            resizeGrid("#gridFGGroups"); 
            resizeGrid("#gridEquipUtilClass");
            resizeGrid("#gridEquipUtilGroups");  
            resizeGrid("#gridINV");                         
            resizeGrid("#gridFGInventory");  
            resizeGrid("#gridWIPClass");  
            resizeGrid("#gridWIPGroups"); 
            resizeGrid("#gridAssyWip");
            resizeGrid("#gridAsmbldGoodsInv");                                                
            
            resizeGrid("#gridOutsMonthClass");
            resizeGrid("#gridOutsMonthGroups"); 
            resizeGrid("#gridFgMonthClass");  
            resizeGrid("#gridFgMonthGroups"); 
            resizeGrid("#gridEUMonthClass");
            resizeGrid("#gridEUMonthGroups");                           

        });

        //------- End Splitter Resize  -----------------------------------------------------------------------------------------

         function getSelectedNodeFullPath(e) {
            var kitems = $(e.node).add($(e.node).parentsUntil('.k-treeview', '.k-item'));
            var texts = $.map(kitems, function(kitem) {
                    return $(kitem).find('>div span.k-in').text();
                });

                kendoConsole.log("Fullpath: " + texts.join('/'));

            return texts.join('/')
        }


        //------- Start Treeview Menu -----------------------------------------------------------------------------------------
                
        function onTreeviewMenuSelect(e) {
            
            var parent = this.parent(e.node);       // `this` refers to the treeview object
            var parentText;
            var selectedText = this.text(e.node);
            console.log(selectedText);
            if (parent.length > 0) {
                parentText = treeviewMain.text(parent);
                    
                 $("#WipInv").val(parentText);                                   
                 
//                 $("#gridINV").data("kendoGrid").dataSource.read();  
//                 $("#gridInvStocksParent").data("kendoGrid").dataSource.read();                   
               
            }
            else 
            {
                // get the current selected text for parent
                parentText = this.text(e.node);                                                     
            }

            kendoConsole.log("Selecting Node: " + selectedText + " Parent: " + parentText);

             // Get selected node fullpath
//            getSelectedNodeFullPath(e);
              
            $("#fullpath").html(getSelectedNodeFullPath(e)); 
            
            var treeMonth = $("#treeviewMonthly").data("kendoTreeView");

            treeMonth.collapse(".k-item");
                     
            $("#Groupings").val(parentText);
            $("#Classification").val(selectedText);          
           
//            $("#gridWIP").data("kendoGrid").refresh();
            $("#gridINV").data("kendoGrid").refresh();

            // Check if to open the center-pane
            switch (parentText.toUpperCase())
            {
                case "GTS" : 
                case "SOHED" :
                case "CURSEN" :
                case "IC" :
                case "SEN-QFN" :
                case "SENSOR SIP" : 
                case "USB" :                                        
                    // Show center pane
                    toggleCenterPane(true);                   
                    
                    break;
                default:
                    // Hide center pane
                    toggleCenterPane(false);                                                                                
            }                      

        }

        function onTreeviewMenuChange(e) {
            var parent;
            var parentText;

            var selected = treeviewMain.select()
            var getitem = treeviewMain.dataItem(selected);
            var selectedText = treeviewMain.text(selected);  //e.sender._current.context.innerText.trim();

            parent = treeviewMain.parent(treeviewMain.findByUid(getitem.uid));

            if (parent.length > 0 ) {
                parentText = treeviewMain.text(parent);
            }
            else {
                // get the current selected text for parent
                parentText = selectedText;                                    
            }

            kendoConsole.log("Selected Change " + selectedText + " Parent: " + parentText);                
            
            if(parentText.toLowerCase() == "ampi" && selectedText.toLowerCase() == "ampi")
            {
                $("#welcomeNote").show();
                $("#tab1Test").hide();
                $("#tab2Test").hide();
                $("#tab3Test").hide();
                $("#tab4Test").hide();      
                $("#tab5Assy").hide();     
                $("#tab6Test").hide();       

            }

            else if (parentText.toLowerCase() == "ampi" && selectedText.toLowerCase() == "test")
            {
                $("#welcomeNote").hide();
                $("#tab1Test").show();
                $("#tab2Test").hide();
                $("#tab3Test").hide();
                $("#tab4Test").hide();
                $("#tab5Assy").hide();
                $("#tab6Test").hide();  
                $("#tab7Assy").hide();   

                var gridTestOutput = $("#gridTestOutput").data("kendoGrid");
                gridTestOutput.destroy();
                $("#gridTestOutput").empty();

                $.ajax({
                    url: '/Home/SpDashboardTestOutput_parent',
                    type: 'POST',                
                    datatype: 'json',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        // Handle the beforeSend event

                        $("#spinner").show();
                    },
                    complete: function () {
                        // Handle the complete event

                        $("#spinner").hide();
                    },

                    success: function (data) {

                        var dateFields = [];
                        generateGrid(data.Data)



                        function generateGrid(gridData) {

                            var model = generateModelTestOut(gridData[0]);
                            var columns = generateColumnsTestOutput(gridData[0]);

                            var colLenght = columns.length;

                            var aggregates_ = generateAggregates(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            }
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridTestOutput").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100,
                                    group:  [{ field: "ProductGroup", aggregates: aggregates_}],                                 
                                    aggregate: aggregates_
                                },
                                pageable: {
                                        refresh: true,
                                        pageSizes: false,
                                        buttonCount: 5
                                        },
                                columns: columns,                            
                                editable: "popup",
                                sortable: true,
                                resizable: true,
                                selectable: "single cell",
                               //detailInit: detailInitTestOutputChild,
                                excelExport: function(e) 
                                {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");

                                        var sheet = e.workbook.sheets[0];

                                        colLenght = colLenght - 1;

                                        //   alert(colLenght);


                                            for (var cellIndex = 2; cellIndex < colLenght; cellIndex ++) {
                                             
                                             // row.cells[cellIndex].format = "[Blue]#,##0.0_);[Red](#,##0.0);0.0;"

                                             // var celVal =  sheet.rows[row].cells[cellIndex].value;

                                                 var  celVal = 0;

                                                 var grandTotal = 0;

                                                 for(var rowIndex = 2; rowIndex < sheet.rows.length; rowIndex++)
                                                 {
                                    
                                                    var row = sheet.rows[rowIndex];

                                                    //  alert(row.type);

                                                    //  var celVal =  row.cells[cellIndex].value;

                                                       if(row.type == "data")
                                                       {
                                                    
                                                             // var dataCelVal = ;

                                                              if(typeof (row.cells[cellIndex]) === "undefined"){

                                                                alert("undefined");
                                                              
                                                              }
                                                              else {
                                                              
                                                                 celVal =  celVal + row.cells[cellIndex].value;  
                                                              
                                                              }
                                                            
                                                              
                                                   
                                                       }
                                                       
                                                       else if(row.type == "group-footer")
                                                       {
                                                             
                                                               var groupFooterCell = row.cells[cellIndex];

                                                                   groupFooterCell.value = celVal;

                                                                   grandTotal = grandTotal + row.cells[cellIndex].value;

                                                                   celVal = 0;

                                                             
                                                       }
                                                       else if(row.type == "footer")
                                                       {
                                                       
                                                               var footerCell = row.cells[cellIndex];

                                                                   footerCell.value = grandTotal;

                                                                   grandTotal = 0;
                                                       }
                                                  
                                            
                                                 }

                                            
                                            }


                                       e.workbook.fileName = "TestOutput" + "_" + timestamp + ".xlsx";

                                },
                                    
                                dataBound: function() 
                                {
                                    this.hideColumn("Connector");       

                                    $.ajax({

                                    url: '/Grid/GetRemarkID/',
                                    type: 'POST',
                                    // data: jsonTestOutputChild,
                                    datatype: 'json',
                                    contentType: 'application/json; charset=utf-8',
                                    success: function (data) {

                                        var grid = $("#gridTestOutput").data("kendoGrid");

                                        grid.hideColumn("Connector");

                                        $.each(data, function (i, item) {

                                            

                                            var colname = item.ID.toString();

                                            colname = colname.split("_").join(" ");

                                            var colnameIndex = colname.lastIndexOf("W");

                                            var connectorID = colname.substring(0, colnameIndex - 1);

                                            colname = colname.substring(colnameIndex - 1);


                                            var colIndex = grid.thead.find("th[data-field='" + colname + "']").index();

                                            var dataItem = grid.dataSource.get(connectorID);

                                            if (typeof dataItem === "undefined") 
                                            {
                                            
                                                alert("ConnectorID : "+ connectorID +" is undefined. Please contact your IT Administrator");
                                            
                                            }

                                            var rowIndex = grid.tbody.find("tr[data-uid='" + dataItem.uid + "']").index();

                                            loadDirtyflag(rowIndex, colIndex + 1);


                                        });

                                    }  // end of success function

                                }); //end of ajax request       
                                                                                            
                                } // end of databound
                            })

                            $("#gridTestOutput").data("kendoGrid").dataSource.read();

                             var grid = $("#gridTestOutput").data("kendoGrid");

                             var upperLimit = colLenght - 1;

                             var lowerLimit = upperLimit - 3;

                           //  alert("Upper Limit: " + upperLimit + " " + "Lower Limit: " + lowerLimit);

                              var j = 3;

                             for(var i = lowerLimit; i <= upperLimit; i++)
                             {
                                

                                 if(j != 7)
                                 {
                                 
                                  grid.reorderColumn(j, grid.columns[i]);

                                  j++;
                                 
                                 }
                                

                             }

                            grid.table.kendoTooltip({
                            filter: ".abc",
                            width: 200,
                            beforeShow: function (e) {

                                if ($("#varComments").val() === "" || $("#varComments").val() === null) {
                                    // don't show the tooltip if the name attribute contains null
                                    e.preventDefault();

                                }
                            },

                          //  content:  kendo.template($("#template").html()),

                            content: function (e) {

                                  
                                var r = $("#varComments").val();

                                return r;

                                // ----- return function for getting remarks ------------

                            }, 

                            hide: function () {

                                $("#varComments").val(null);

                            }


                        });   //  end of kendo tooltip

                        }                       


                  },
                    error: function (request, status, err) {
                        alert(status);
                        alert(err);
                    }
                });

                  

//                         $(".k-pager-refresh").trigger('click');  

                    function generateAggregates(gridData) {

                        var aggregates = [];

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    aggregates.push({
                                        field: dataItem,
                                        aggregate: "count"
                                    });
                                    break;
                                case "number":
                                default:
                                    if (dataItem.includes('Target'))
                                        aggregates.push({
                                            field: dataItem,
                                            aggregate: "sum"
                                        });
                                    else {
                                        aggregates.push({
                                            field: dataItem,
                                            aggregate: "sum"
                                        });
                                    }
                            }
                        }
                        return aggregates;
                    }

                     function generateFGAggregates(gridData) {

                        var aggregates = [];

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    aggregates.push({
                                        field: dataItem,
                                        aggregate: "count"
                                    });
                                    break;
                                case "number":
                                default:
                                  
                                        aggregates.push({
                                            field: dataItem,
                                            aggregate: "sum"
                                        });
                                    
                            }
                        }
                        return aggregates;
                    }

                    function generateAsmbldGoodsInvAggregates(gridData) {

                        var aggregates = [];

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    aggregates.push({
                                        field: dataItem,
                                        aggregate: "count"
                                    });
                                    break;
                                case "number":
                                default:
                                  
                                        aggregates.push({
                                            field: dataItem,
                                            aggregate: "sum"
                                        });
                                    
                            }
                        }
                        return aggregates;
                    }
                            
                            
                    function generateColumnsTestOutput(gridData) {

                                // initiate the column array
                                var columns = [];

                                // iterate all of the data items in the first element of the returned JSON data
                                for (var dataItem in gridData) {

                                    var colTitle = dataItem;

                                    // check column datatype
                                    switch (typeof gridData[dataItem]) {
                                        case "string":
                                            if (dataItem == "ProductGroup") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true

                                                });
                                            }
                                            else if (dataItem == "Connector") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    width: 200 
                                                });
                                            }
                                            else if (dataItem == "PackageGroup1") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: "PackageGroup",
                                                    width: 200,
                                                    locked: true,
                                                    template: "<a class='pckgeGroup1' ; pkgGrp1='" + dataItem + "' href='\\#'>#= linkPackageGroup(data, '" + dataItem + "') #</a>",
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: left; font-weight:bold; font-size:small;" },
                                                    footerAttributes: { style: "text-align: left; font-size:small;" },  
                                                    groupFooterTemplate: "Total : ",
                                                    footerTemplate: "Grand Total : "
                                                });
                                            }                                             
                                            else {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    width: 100,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                                });
                                            }
                                            break;

                                        case "number":
                                        default:
                                            if (dataItem.includes('Target')) {
                                                    columns.push({
                                                        field: dataItem,
                                                        title: "Target",
                                                        width: 100,
                                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                                        template: "#= workWeekDetailsTestOutputTarget(data, '" + dataItem + "') #",
                                                        format: "{0:N0}",
                                                        aggregates: ["sum"],   
                                                        footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },                                 
                                                        groupFooterTemplate: "#: kendo.format('{0:N0}', sum/1000) #",
                                                        footerTemplate: "#: kendo.format('{0:N0}', sum/1000) #"                                                   
                                                        });
                                                }
                                            else {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    width: 100,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                                 // template: "#= workWeekDetailsTestOutput(data, '" + dataItem + "') #",
                                                    template: "<a class='abc' ; workWeek='" + dataItem + "' href='\\#'>#= workWeekDetailsTestOutput(data, '" + dataItem + "') #</a>",
                                                    aggregates: ["sum"],   
                                                    footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },                                 
                                                    groupFooterTemplate: "#: kendo.format('{0:N0}', sum/1000) #",
                                                    footerTemplate: "#: kendo.format('{0:N0}', sum/1000) #"                                                             
                                                });
                                            }
                                    }
                                }

                                return columns;

                            } // end of columns definition                                                                                                                    

                        var gridTestYield = $("#gridTestYield").data("kendoGrid");
                        gridTestYield.destroy();
                        $("#gridTestYield").empty();

                            $.ajax({
                                url: '/Home/SpDashboardTestYield_parent',
                                type: 'POST',
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                beforeSend: function () {
                                    // Handle the beforeSend event

                                    $("#spinner").show();
                                },
                                complete: function () {
                                    // Handle the complete event

                                    $("#spinner").hide();
                                },

                                success: function (data) {

                                    var dateFields = [];
                                    generateGrid(data.Data)

                                    function generateGrid(gridData) {

                                        var model = generateModel(gridData[0]);
                                        var columns = generateColumnsTestYield(gridData[0]);
                                        var aggregates_ = generateAggregatesTestYield(gridData[0]);

                                        var parseFunction;
                                        if (dateFields.length > 0) {
                                            parseFunction = function (response) {
                                                for (var i = 0; i < response.length; i++) {
                                                    for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                        var record = response[i];
                                                        record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                    }
                                                }
                                                return response;
                                            };
                                        }

                                        var schema;
                                        if (parseFunction) {
                                            schema = {
                                                model: model,
                                                parse: parseFunction
                                            };
                                        }
                                        else {
                                            schema = {
                                                model: model
                                            };
                                        }

                                    $("#gridTestYield").kendoGrid({
                                        toolbar: [
                                            "excel",
                                            {
                                                text: "Customized Yield Report",
                                                id: "cmdCustomizedYieldRpt"
                                            }
                                        ],
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            pageSize: 100,
                                            group: { field: "ProductGroup", aggregates: aggregates_ },
                                            aggregate: aggregates_
                                        },
                                        pageable: {
                                        refresh: true,
                                        pageSizes: false,
                                        buttonCount: 5
                                        },
                                        columns: columns,
                                        editable: "popup",
                                        sortable: true,
                                        resizable: true,
                                        selectable: "single cell",
                                        excelExport: function(e) {                                    
                                            var timestamp = new Date().format("yyyyMMddHHmmss");
                                            e.workbook.fileName = "TestYield" + "_" + timestamp + ".xlsx";
                                        },
                                        dataBound: function() 
                                        {
                                            this.hideColumn("Connector");     
                                        }                                       
                                    })

                                    $("#gridTestYield").data("kendoGrid").dataSource.read();
                                }
                            },
                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            }
                        });                    

                    function generateAggregatesTestYield(gridData) {

                        var aggregates = [];

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    aggregates.push({
                                        field: dataItem,
                                        aggregate: "count"
                                    });
                                    break;
                                case "number":
                                default:
                                    if (dataItem.includes('Target'))
                                        aggregates.push({
                                            field: dataItem,
                                            aggregate: "average"
                                        });
                                    else {
                                        aggregates.push({
                                            field: dataItem,
                                            aggregate: "average"
                                        });
                                    }
                            }
                        }
                        return aggregates;
                    }

                    function generateColumnsTestYield(gridData) {

                        // initiate the column array
                        var columns = [];

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    if (dataItem == "ProductGroup") {
                                        columns.push({
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight: bold" },
                                            groupHeaderTemplate: "#= value #",
                                            visible: true,
                                            hidden: true

                                        });
                                    }
                                    else if (dataItem == "PackageGroup1") {
                                        columns.push({
                                            field: dataItem,
                                            title: "PackageGroup",
                                            width: 200,
                                            locked: true,
                                            template: "<a class='pckgeGroup1Yield' ; pkgGrp1='" + dataItem + "' href='\\#'>#= linkPackageGroupYield(data, '" + dataItem + "') #</a>",
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: left; font-weight:bold; font-size:small;" },
                                            footerAttributes: { style: "text-align: left; font-size:small;" },
                                            groupFooterTemplate: "Average : ",
                                            footerTemplate: "Total Average : "
                                        });
                                    }                                    
                                    else {
                                        columns.push({
                                            field: dataItem,
                                            title: colTitle,
                                            width: 100,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });
                                    }
                                    break;

                                case "number":
                                default:
                                    if (dataItem.includes('Target'))
                                        columns.push({
                                            field: dataItem,
                                            title: "Target",
                                            width: 100,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                            aggregates: ["average"],
                                            footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },
                                            groupFooterTemplate: "#: kendo.format('{0:n2}', average) #",
                                            footerTemplate: "#: kendo.format('{0:n2}', average) #"
                                          

                                        });
                                    else {
                                        columns.push({
                                            field: dataItem,
                                            title: colTitle,
                                            width: 100,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                            template: "<a onclick=comments('" + dataItem + "') ; href='\\#'>#= workWeekDetailsYield(data, '" + dataItem + "') #</a>",
                                            aggregates: ["average"],
                                            footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },
                                            groupFooterTemplate: "#: kendo.format('{0:n2}', average) #",
                                            footerTemplate: "#: kendo.format('{0:n2}', average) #"
                                          
                                        });
                                    }
                            }
                        }

                        return columns;

                    } // end of columns definition  

                
                var gridFGInventory = $("#gridFGInventory").data("kendoGrid");
                gridFGInventory.destroy();
               
                $("#gridFGInventory").empty();

                $.ajax({
                        url: '/Home/SpDashboardFGInventory',
                        type: 'POST',                        
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModelAssyWip(gridData[0]);
                            var columns = generateColumnsFGInv(gridData[0]);
                            var aggregates_ = generateFGAggregates(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridFGInventory").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100,
                                    group:  [{ field: "AsOf", aggregates: aggregates_ },
                                              {field: "ProductGroup", aggregates: aggregates_ }
                                            ],
                                    aggregate: aggregates_
                                },                                                     
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                                                            
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "WeeklyFG_Inventory" + "_" + timestamp + ".xlsx";
                                    }
                            });

                            $("#gridFGInventory").data("kendoGrid").dataSource.read();                                                                              
                   }
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
              
               }); // end of FG Inventory
            

                 function generateColumnsFGInv(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;  
                          //  var target = "_Target_Qty";

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":  
                                    if (dataItem == "ProductGroup") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate:  "#= value #",   
                                                    visible: true,
                                                    hidden: true                                             
                                                    });
                                    } 
                                    else if (dataItem == "PackageGroup1") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: "PackageGroup",
                                                    width: 200,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: left; font-weight:bold; font-size:small;" },
                                                    footerAttributes: { style: "font-size:small;" },  
                                                    groupFooterTemplate: "Total : ",
                                                    footerTemplate: "Grand Total : "
                                                });
                                    }        
                                    else if (dataItem == "AsOf") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },                                                    
                                                    groupHeaderTemplate: "#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>",
                                                    visible: true,
                                                    hidden: true                                                 
                                                    });
                                    }                                       
                                    else {
                                           columns.push({                                        
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                                    footerAttributes: { style: "text-align: center; font-size:small; color: Blue" }
                                                    });     
                                    }                                                                                                 
                                    break;

                                case "number":
                                default:
                                            columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },                                                    
                                                    format: "{0:N0}",
                                                    aggregates: ["sum"],   
                                                    footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },                                
                                                    groupFooterTemplate: "#: kendo.format('{0:N0}', sum) #",
                                                    footerTemplate: "#: kendo.format('{0:N0}', sum) #"             
                                                    }); 
                                }
                        }

                        return columns;

                    } // end of columns definition FG Inventory

                var gridAsmbldGoodsInv = $("#gridAsmbldGoodsInv").data("kendoGrid");
                gridAsmbldGoodsInv.destroy();
               
                $("#gridAsmbldGoodsInv").empty();

                $.ajax({
                        url: '/Home/SpDashboardAsmbldGoodsInv',
                        type: 'POST',                        
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModelAssyWip(gridData[0]);
                            var columns = generateColumnsAsmbldGoodsInv(gridData[0]);
                            var aggregates_ = generateAsmbldGoodsInvAggregates(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridAsmbldGoodsInv").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100,
                                    group:  [{ field: "AsOf", aggregates: aggregates_ },
                                              {field: "ProductGroup", aggregates: aggregates_ }
                                            ],
                                    aggregate: aggregates_
                                },                                                     
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                                                            
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "WeeklyAsmbldGoods_Inventory" + "_" + timestamp + ".xlsx";
                                    }
                            });

                            $("#gridAsmbldGoodsInv").data("kendoGrid").dataSource.read();                                                                              
                   }
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
              
               }); // end of FG Inventory
            

                 function generateColumnsAsmbldGoodsInv(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;  
                          //  var target = "_Target_Qty";

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":  
                                    if (dataItem == "ProductGroup") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate:  "#= value #",   
                                                    visible: false,
                                                    hidden: true                                             
                                                    });
                                    } 
                                    else if (dataItem == "PackageGroup1") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: "PackageGroup",
                                                    width: 200,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: left; font-weight:bold; font-size:small;" }, 
                                                    footerAttributes: { style: "font-size:small;" }, 
                                                    groupFooterTemplate: "Total : ",
                                                    footerTemplate: "Grand Total : "
                                                });
                                    }        
                                    else if (dataItem == "AsOf") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" }, 
                                                    groupHeaderTemplate: "#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>",
                                                    visible: true,
                                                    hidden: true                                                 
                                                    });
                                    }                                       
                                    else {
                                           columns.push({                                        
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                                    footerAttributes: { style: "text-align: left; font-size:small;" }
                                                    });     
                                    }                                                                                                 
                                    break;

                                case "number":
                                default:
                                            columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },                                                    
                                                    format: "{0:N0}",
                                                    aggregates: ["sum"],   
                                                    footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },                                
                                                    groupFooterTemplate: "#: kendo.format('{0:N0}', sum) #",
                                                    footerTemplate: "#: kendo.format('{0:N0}', sum) #"             
                                                    }); 
                                }
                        }

                        return columns;

                    } // end of columns definition Asmbld Goods Inventory
            
            } // end of else if

            else if (parentText.toLowerCase() == "ampi" && selectedText.toLowerCase() == "assembly")
            {
                $("#welcomeNote").hide();
                $("#tab1Test").hide();
                $("#tab2Test").hide();
                $("#tab3Test").hide();
                $("#tab4Test").hide(); 
                $("#tab5Assy").show(); 
                $("#tab6Test").hide();  
                $("#tab7Assy").hide();   

              var selectedTab =  $("#tab5Assy").data("kendoTabStrip").select().index();

              if(selectedTab == 0)
              {
                  $('#hidAssyOperation').val("3001"); 
              
              }
              else if(selectedTab == 1)
              {
               $('#hidAssyOperation').val("3995"); 
              }
               else if(selectedTab == 2)
              {
               $('#hidAssyOperation').val("6000"); 
              }

                
                 var gridAssyOutput3001 = $("#gridAssyOutput3001").data("kendoGrid");
                        gridAssyOutput3001.destroy();
                        $("#gridAssyOutput3001").empty();

                            $.ajax({
                                url: '/Home/SpDashboardAssyOutput3001',
                                type: 'POST',
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                beforeSend: function () {
                                    // Handle the beforeSend event

                                    $("#spinner").show();
                                },

                                complete: function () {
                                    // Handle the complete event

                                    $("#spinner").hide();
                                },

                                success: function (data) {

                                   // var dateFields = [];
                                  
                                    generateGrid3001(data.Data)

                            },

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            }
                        });

                   

                    

                             
            }

//            else if (parentText.toLowerCase() == "historical logs")
//            {
//            
//                alert("Historical Logs");
//            }

            else if (parentText.toLowerCase() == "test")
            {                   
                $("#welcomeNote").hide();                
                $("#WipInv").val(selectedText); 
                                                
                // INV PROGRAM                
              //  $("#gridInvStocksParent").data("kendoGrid").dataSource.read();                                                                                                      
              
                $("#gridINV").data("kendoGrid").dataSource.read();                                                                                                    
                                
                $("#tab1Test").hide();
                $("#tab2Test").show();
                $("#tab3Test").hide();
                $("#tab4Test").hide();      
                $("#tab5Assy").hide(); 
                $("#tab6Test").hide();
                $("#tab7Assy").hide();                                                                   
            }

            else if (parentText.toLowerCase() == "assembly")
            {                   
                $("#welcomeNote").hide();                
                $("#Groupings").val(selectedText);
                var assyGroup =  $("#Groupings").val();                                                                   
                                
                $("#tab1Test").hide();
                $("#tab2Test").hide();
                $("#tab3Test").hide();
                $("#tab4Test").hide();   
                $("#tab5Assy").hide(); 
                $("#tab6Test").hide(); 
                $("#tab7Assy").show();   
                 
                 $("#gridAssyWip").show();
                 $("#gridWIPClass").hide();
                 $("#gridWIPGroups").hide();
                 


                var jsonDataAssyGroup = JSON.stringify({ groupings: assyGroup });

                var gridAssyWip = $("#gridAssyWip").data("kendoGrid");
                gridAssyWip.destroy();
                $("#gridAssyWip").empty();

                $.ajax({
                        url: '/Home/SpDashboardAssyWIP',
                        type: 'POST',
                        data: jsonDataAssyGroup,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModelAssyWip(gridData[0]);
                            var columns = generateColumnsAssyWip(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridAssyWip").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    group:  { field: "AsOf"}
                                },                                
//                                pageable: {
//                                    refresh: true,
//                                    pageSizes: (true ? false: true),
//                                    buttonCount: 5
//                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                                                            
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "AssyWip" + "-" + assyGroup + "_" + timestamp + ".xlsx";
                                    }
                            });

                            $("#gridAssyWip").data("kendoGrid").dataSource.read();                                                                              
                   }
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
                });
                                                                             
            }

            else 
            {   
                $("#welcomeNote").hide();       
                $("#tab3Test").show();
                $("#tab1Test").hide();
                $("#tab2Test").hide();
                $("#tab4Test").hide();
                $("#tab5Assy").hide();
                
                
             
                if(parentText.toLowerCase() != "test" && parentText.toLowerCase() != "ampi" && selectedText.toLowerCase() == "summary")                        
                {           
                                 
                        $("#tab3Test").hide();                                                     
                        $("#tab6Test").show();
                        $("#gridWIPClass").hide(); 
                        $("#gridWIPGroups").show(); 
                        $("#gridWIPGroups").data("kendoGrid").dataSource.read();                         
                        $("#treeviewMonthly").data("kendoTreeView").select($());  
                                      
//                        fYrWk: $("#fYrWk").val(),
                        $("#welcomeNote").hide();     
                        
                                                  
                } 

                else if (parentText.toLowerCase() != "test" && parentText.toLowerCase() != "ampi" && selectedText.toLowerCase() != "summary")
                {
                        
                        $("#tab3Test").hide();                         
                        $("#tab6Test").show();
                        $("#gridWIPClass").show(); 
                        $("#gridWIPGroups").hide();
                        $("#gridWIPClass").data("kendoGrid").dataSource.read();                         
                        $("#treeviewMonthly").data("kendoTreeView").select($()); 
                        

                        $("#welcomeNote").hide();                      
                }
                 
            }



            // Check if 
            if (checkNodeParent(parentText, selectedText) >= 0) {
                // show center pane
                toggleCenterPane(true);

               
            }
            else {
                // hide center pane
                toggleCenterPane(false);
              
            }  
            
         
                                                
        }

        function onTreeviewMenuCollapse(e) {

            kendoConsole.log("Collapsing " + treeviewMain.text(e.node));

            // Select the current expanded node.
            treeviewMain.select(e.node);
        }

        function onTreeviewMenuExpand(e) {

            kendoConsole.log("Expanding " + treeviewMain.text(e.node));

            // Select the current expanded node.
            treeviewMain.select(e.node);
        }

        //------- End Treeview Menu -----------------------------------------------------------------------------------------
                     

        //------- Start Treeview Monthly -----------------------------------------------------------------------------------------
                
        function onTreeviewMonthlySelect(e) {
            
            var parent = this.parent(e.node);       // `this` refers to the treeview object
            var parentText;
            var selectedText = this.text(e.node);           

            if (parent.length > 0) 
            {
                parentText = treeviewMonthly.text(parent);

                    fYear = parentText.substring(4, parentText.length); 
                    $("#FYear").val(fYear);    
            
                    workWeekNum = selectedText.substring(2, selectedText.length);                                
            
                    workWeekNum1 = selectedText.substring(2, 3);               

               if (workWeekNum1 == 0)
               {
               
                workWeekNum2 = selectedText.substring(3, 4);             
               
                fYrWk = fYear + workWeekNum2;  

               }

               else 
               {
               
                 fYrWk = fYear + workWeekNum;  

               }            
            
                $("#fYrWk").val(fYrWk);  
                
                
                var Wclassification = $("#Classification").val();
                var fYearWeek = $("#fYrWk").val();
                var Wgroupings = $("#Groupings").val();   

               // alert(Wclassification);

                var WjsonData = JSON.stringify({ fYrWk: fYearWeek, classification: Wclassification });
                var WjsonDataG = JSON.stringify({ fYrWk: fYearWeek, groupings: Wgroupings });
                var jsonDataOWGParent = JSON.stringify({ fYrWk: fYearWeek, groupings: Wgroupings });
                var jsonDataOWPParent = JSON.stringify({ fYrWk: fYearWeek, groupings: Wgroupings, classification: Wclassification });
                var jsonDataEUPParent = JSON.stringify({ fYrWk: fYearWeek, groupings: Wgroupings, classification: Wclassification });
                var jsonDataEUProductParent = JSON.stringify({ fYrWk: fYearWeek, groupings: Wgroupings });
            
                if ($("#Classification").val().trim().toString() != "Summary")                                                
                {
                    $("#tab3Test").show(); 
                    $("#tab4Test").hide();

                    $("#gridOutsPGroups").hide();
                    $("#gridOutsPClass").show();
//                    $("#gridOutsPClass").data("kendoGrid").dataSource.read();

                    $("#gridFGGroups").hide();
                    $("#gridFGClass").show();
//                    $("#gridFGClass").data("kendoGrid").dataSource.read(); 
                
                    $("#gridFGBalGroups").hide();
                    $("#gridFGBalClass").show();               
                    $("#gridFGBalClass").data("kendoGrid").dataSource.read();
                
                    $("#gridEquipUtilGroups").hide();
                    $("#gridEquipUtilClass").show();
//                    $("#gridEquipUtilClass").data("kendoGrid").dataSource.read();                                                                

                   var gridOutsPClass = $("#gridOutsPClass").data("kendoGrid");
                    gridOutsPClass.destroy();
                    $("#gridOutsPClass").empty();
                 
                    
                    $.ajax({
                        url: '/Home/SpDashboardOutsPerOpsWeekPackage',
                        type: 'POST',
                        data: jsonDataOWPParent,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsOWGParent(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridOutsPClass").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100                                    
                                },                                
                                pageable: {
                                    refresh: true,
                                    pageSizes: (true ? false: true),
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInitOutsW,
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "OutsPerOperation" + "-" + groupings + "_" + fYrWk + "_" + timestamp + ".xlsx";
                                    },
                                dataBound: onDataBoundOutsGroups
                            });

                            $("#gridOutsPClass").data("kendoGrid").dataSource.read();                                                                              
                   }

                    function detailInitOutsW(e) {

                        var jsonDataOWPChild = JSON.stringify({ fYrWk: $("#fYrWk").val().trim().toLowerCase(), groupings: $("#Groupings").val().trim().toLowerCase(), opClass: e.data.OpClass });

                        $.ajax({
                            url: '/Home/SpDashboardOutsPerOpsWeekPackageChild/',
                            type: 'POST',
                            data: jsonDataOWPChild,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                            $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsOWGChild(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            group:  { field: "PackageGroup2"}
                                        },                                        
                                        filter: { field: "OpClass", operator: "eq", value: e.data.OpClass }, 
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundOWGChild
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                    


                   var gridFGWClass = $("#gridFGClass").data("kendoGrid");
                    gridFGWClass.destroy();
                    $("#gridFGClass").empty();

                     $.ajax({
                        url: '/Home/SpDashboardFgWeekClass',
                        type: 'POST',
                        data: WjsonData,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },

                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },

                        success: function (data) {

                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsFGW(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridFGClass").kendoGrid({
                                toolbar: ["excel"],
                                excel: {
                                    fileName: "FGperClass.xlsx",
                                    filterable: true
                                },
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    group:  [{ field: "PackageGroup2"},
                                            { field: "PackageGroup3" }]              
                                },                                        
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,
                                dataBound: onDataBoundFGWC                                                               
                            });

                            $("#gridFGClass").data("kendoGrid").dataSource.read();                                        
                     }                   
                },

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });


             var gridEquipUtilClass = $("#gridEquipUtilClass").data("kendoGrid");
                    gridEquipUtilClass.destroy();
                    $("#gridEquipUtilClass").empty();
                 
                    
                    $.ajax({
                        url: '/Home/SpDashboardEquipmentUtilizationWeekPackage',
                        type: 'POST',
                        data: jsonDataEUPParent,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsEUPParent(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridEquipUtilClass").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    group: [{field: "ProductGroup"},
                                           { field: "EquipmentFamily"}], 
                                    pageSize: 100                                     
                                },                                
                                pageable: {
                                    refresh: true,
                                    pageSizes: (true ? false: true),
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInitEUPChild,
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "EquipmentUtilization" + "-" + Wclassification + "_" + fYrWk + "_" + timestamp + ".xlsx";
                                    },
                                dataBound: onDataBoundEquipUtil
                            });

                            $("#gridEquipUtilClass").data("kendoGrid").dataSource.read();                                                                              
                   }

                    function detailInitEUPChild(e) {

                        var jsonDataEUPChild = JSON.stringify({ fYrWk: $("#fYrWk").val().trim().toLowerCase(), groupings: $("#Groupings").val().trim().toLowerCase(), classification: $("#Classification").val().trim().toLowerCase(), connector: e.data.Connector });

                        $.ajax({
                            url: '/Home/SpDashboardEquipmentUtilizationWeekPackageChild/',
                            type: 'POST',
                            data: jsonDataEUPChild,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                            $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsEUPChild(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            group: [{field: "ParentVendorModel"}]                                           
                                        },                                        
                                        filter: { field: "Connector", operator: "eq", value: e.data.Connector }, 
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundEquipUtil
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                    
                      
                }        

                else
                {   
                    $("#tab3Test").show(); 
                    $("#tab4Test").hide();

                    $("#gridOutsPClass").hide();
                    $("#gridOutsPGroups").show();
//                    $("#gridOutsPGroups").data("kendoGrid").dataSource.read();

                    $("#gridFGClass").hide();
                    $("#gridFGGroups").show();
//                    $("#gridFGGroups").data("kendoGrid").dataSource.read();

                    $("#gridFGBalClass").hide();
                    $("#gridFGBalGroups").show();
                    $("#gridFGBalGroups").data("kendoGrid").dataSource.read();

                    $("#gridEquipUtilClass").hide();
                    $("#gridEquipUtilGroups").show();
//                    $("#gridEquipUtilGroups").data("kendoGrid").dataSource.read();                      
                   
                    var gridOutsWGroups = $("#gridOutsPGroups").data("kendoGrid");
                    gridOutsWGroups.destroy();
                    $("#gridOutsPGroups").empty();
                 
                    
                    $.ajax({
                        url: '/Home/SpDashboardOutsPerOpsWeekGroups',
                        type: 'POST',
                        data: jsonDataOWGParent,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsOWGParent(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridOutsPGroups").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100                                    
                                },                                
                                pageable: {
                                    refresh: true,
                                    pageSizes: (true ? false: true),
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInitOutsW,
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "OutsPerOperation" + "-" + groupings + "_" + fYrWk + "_" + timestamp + ".xlsx";
                                    },
                                dataBound: onDataBoundOutsGroups
                            });

                            $("#gridOutsPGroups").data("kendoGrid").dataSource.read();                                                                              
                   }

                    function detailInitOutsW(e) {

                        var jsonDataOWGChild = JSON.stringify({ fYrWk: $("#fYrWk").val().trim().toLowerCase(), groupings: e.data.ProductGroup, opClass: e.data.OpClass });

                        $.ajax({
                            url: '/Home/SpDashboardOutsPerOpsWeekGroupsChild/',
                            type: 'POST',
                            data: jsonDataOWGChild,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                            $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsOWGChild(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema
                                        },                                        
                                        filter: { field: "OpClass", operator: "eq", value: e.data.OpClass }, 
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundOWGChild
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                             


                            var gridFGWGroups = $("#gridFGGroups").data("kendoGrid");
                            gridFGWGroups.destroy();
                            $("#gridFGGroups").empty();

                                $.ajax({
                                url: '/Home/SpDashboardFgWeekGroups',
                                type: 'POST',
                                data: WjsonDataG,
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                beforeSend: function () {
                                    // Handle the beforeSend event

                                    $("#spinner").show();
                                },

                                complete: function () {
                                    // Handle the complete event

                                    $("#spinner").hide();
                                },

                                success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsFGW(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } 
                                    else {
                                        schema = {
                                            model: model
                                        };
                                    }

                                    $("#gridFGGroups").kendoGrid({
                                        toolbar: ["excel"],
                                        excel: {
                                            fileName: "FGperWGroups.xlsx",
                                            filterable: true
                                        },
                                        dataSource: {
                                            data: gridData,
                                            schema: schema
                                                                              
                                        },                                        
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,
                                        selectable: true,
                                        dataBound: onDataBoundFGW                                                                     
                                               
                                    });

                                            $("#gridFGGroups").data("kendoGrid").dataSource.read();                                        
                                     }
                   
                                },

                                error: function (request, status, err) {
                                    alert(status);
                                    alert(err);
                                }

                              });


                    var gridEquipUtilGroups = $("#gridEquipUtilGroups").data("kendoGrid");
                    gridEquipUtilGroups.destroy();
                    $("#gridEquipUtilGroups").empty();
                 
                    
                    $.ajax({
                        url: '/Home/SpDashboardEquipmentUtilizationWeekProduct',
                        type: 'POST',
                        data: jsonDataEUProductParent,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsEUPParent(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridEquipUtilGroups").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    group: [{field: "ProductGroup"},
                                           { field: "EquipmentFamily"}], 
                                    pageSize: 100                                     
                                },                                
                                pageable: {
                                    refresh: true,
                                    pageSizes: (true ? false: true),
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInitEUPChild,
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "EquipmentUtilization" + "-" + Wgroupings + "_" + fYrWk + "_" + timestamp + ".xlsx";
                                    },
                                dataBound: onDataBoundEquipUtil
                            });

                            $("#gridEquipUtilGroups").data("kendoGrid").dataSource.read();                                                                              
                   }

                    function detailInitEUPChild(e) {

                        var jsonDataEUProdutChild = JSON.stringify({ fYrWk: $("#fYrWk").val().trim().toLowerCase(), groupings: $("#Groupings").val().trim().toLowerCase(), connector: e.data.Connector });

                        $.ajax({
                            url: '/Home/SpDashboardEquipmentUtilizationWeekProductChild/',
                            type: 'POST',
                            data: jsonDataEUProdutChild,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                            $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsEUPChild(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            group: [{field: "ParentVendorModel"}]                                           
                                        },                                        
                                        filter: { field: "Connector", operator: "eq", value: e.data.Connector }, 
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundEquipUtil
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                                              
                                   
                }  // end of else
                                      
            } // end of (parent.length > 0)
 
            else 
            {
                // get the current selected text for parent
                parentText = this.text(e.node);

                fMo = selectedText.substring(0,3);
                fYear = parentText.substring(4, parentText.length)
                fYrMo = fYear + fMo

                $("#fYrMo").val(fYrMo);              

                var classification = $("#Classification").val();
                var fYearMonth = $("#fYrMo").val();
                var groupings = $("#Groupings").val();
                var jsonData = JSON.stringify({ fYrMo: fYearMonth, groupings: groupings, Classification: classification });
                var jsonDataG = JSON.stringify({ fYrMo: fYearMonth, groupings: groupings });

                if ($("#Classification").val().trim().toString() == "Summary")
                {                                          
                    // for groups
                    $("#tab4Test").show();   
                    $("#tab3Test").hide();      
                    
                    
                    $("#gridOutsMonthClass").hide();                    
                    $("#gridOutsMonthGroups").show();

                    $("#gridFgMonthClass").hide();                    
                    $("#gridFgMonthGroups").show();

                    $("#gridEUMonthClass").hide();                    
                    $("#gridEUMonthGroups").show();
                    
                    $("#gridFGMoBalClass").hide();
                    $("#gridFGMoBalGroups").show(); 
                    $("#gridFGMoBalGroups").data("kendoGrid").dataSource.read();         

                    var gridOutsGroups = $("#gridOutsMonthGroups").data("kendoGrid");
                    gridOutsGroups.destroy();
                    $("#gridOutsMonthGroups").empty();
                 
                    
                    $.ajax({
                        url: '/Home/SpDashboardOutsMonthPGroups',
                        type: 'POST',
                        data: jsonDataG,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsOuts(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridOutsMonthGroups").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100                                    
                                },                                
                                pageable: {
                                    refresh: true,
                                    pageSizes: (true ? false: true),
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInitOuts,
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "OutsPerOperation" + "-" + groupings + "_" + fYrMo + "_" + timestamp + ".xlsx";
                                    },
                                dataBound: onDataBoundOutsGroups
                            });

                            $("#gridOutsMonthGroups").data("kendoGrid").dataSource.read();                                                                              
                   }

                    function detailInitOuts(e) {

                        var jsonCDataOutsGroups = JSON.stringify({ fYrMo: $("#fYrMo").val().trim().toLowerCase(), groupings: e.data.ProductGroup, opClass: e.data.OpClass });

                        $.ajax({
                            url: '/Home/SpDashboardOutsMonthCGroups/',
                            type: 'POST',
                            data: jsonCDataOutsGroups,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                            $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsChildOuts(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema
                                        },                                        
                                        filter: { field: "OpClass", operator: "eq", value: e.data.OpClass }, 
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundOutsGroups
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                             
                 
                   

                var gridFGGroupsM = $("#gridFgMonthGroups").data("kendoGrid");
                    gridFGGroupsM.destroy();
                    $("#gridFgMonthGroups").empty();

                $.ajax({
                        url: '/Home/SpDashboardFgMonthGroups',
                        type: 'POST',
                        data: jsonDataG,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },

                        success: function (data) {

                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsFG(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridFgMonthGroups").kendoGrid({
                                toolbar: ["excel"],
//                                excel: {
//                                    fileName: "FGperGroups.xlsx",
//                                    filterable: true
//                                },
                                dataSource: {
                                    data: gridData,
                                    schema: schema                                    
                                },                                        
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                                                            
                                excelExport: function(e) {                                    
                                    var timestamp = new Date().format("yyyyMMddHHmmss");
                                    e.workbook.fileName = "FinishedGoods" + "-" + groupings + "_" + fYrMo + "_" + timestamp + ".xlsx";
                                    }
                            });

                            $("#gridFgMonthGroups").data("kendoGrid").dataSource.read();                                        
                     }
                   
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                      
                   
                    var gridGroups = $("#gridEUMonthGroups").data("kendoGrid");
                    gridGroups.destroy();
                    $("#gridEUMonthGroups").empty();
                 

                    $.ajax({
                        url: '/Home/SpDashboardEUMonthPGroups',
                        type: 'POST',
                        data: jsonDataG,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },

                        success: function (data) {

                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumns(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridEUMonthGroups").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100,
                                    group: [{field: "ProductGroup"},
                                           { field: "EquipmentFamily"}]
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: true,
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInit,
                                excelExport: function(e) {                                    
                                        var timestamp = new Date().format("yyyyMMddHHmmss");
                                        e.workbook.fileName = "EquipmentUtilization" + "-" + groupings + "_" + fYrMo + "_" + timestamp + ".xlsx";
                                    },
                                dataBound: onDataBoundEuGroups
                            });

                            $("#gridEUMonthGroups").data("kendoGrid").dataSource.read();
                    }


                    function detailInit(e) {

                        var jsonCData = JSON.stringify({ fYrMo: $("#fYrMo").val().trim().toLowerCase(), groupings: $("#Groupings").val().trim().toLowerCase(), connector: e.data.Connector });

                        $.ajax({
                            url: '/Home/SpDashboardEUMonthCGroups/',
                            type: 'POST',
                            data: jsonCData,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                                $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                                success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsChildEu(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            group: [{field: "ParentVendorModel"}]
                                        },                                        
                                        filter: { field: "Connector", operator: "eq", value: e.data.Connector },
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundEuGroups
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });

                                                                                                     
                }   
                             
                else
                {
                    // for classifications
                    $("#tab4Test").show();   
                    $("#tab3Test").hide();

                    $("#gridEUMonthGroups").hide();
                    $("#gridEUMonthClass").show();

                    $("#gridOutsMonthGroups").hide();
                    $("#gridOutsMonthClass").show();

                    $("#gridFgMonthGroups").hide();
                    $("#gridFgMonthClass").show();
                    
                    $("#gridFGMoBalGroups").hide();
                    $("#gridFGMoBalClass").show();
                    $("#gridFGMoBalClass").data("kendoGrid").dataSource.read();


                        var gridEuClass = $("#gridEUMonthClass").data("kendoGrid");
                        gridEuClass.destroy();
                        $("#gridEUMonthClass").empty();

                         $.ajax({
                                url: '/Home/SpDashboardEUMonthPClass',
                                type: 'POST',
                                data: jsonData,
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                beforeSend: function () {
                                    // Handle the beforeSend event

                                    $("#spinner").show();
                                },
                               complete: function () {
                                    // Handle the complete event

                                    $("#spinner").hide();
                                },
                                success: function (data) {                                

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumns(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } 
                                    else {
                                        schema = {
                                            model: model
                                        };
                                    }

                                    $("#gridEUMonthClass").kendoGrid({
                                        toolbar: ["excel"],
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            pageSize: 100,
                                            group: [{field: "ProductGroup"},
                                                   { field: "EquipmentFamily"}]
                                        },
                                        pageable: {
                                            refresh: true,
                                            pageSizes: true,
                                            buttonCount: 5
                                        },                            
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,
                                        selectable: true,                            
                                        detailInit: detailInit,
                                        excelExport: function(e) {                                    
                                                var timestamp = new Date().format("yyyyMMddHHmmss");
                                                e.workbook.fileName = "EquipmentUtilization" + "-" + classification + "_" + fYrMo + "_" + timestamp + ".xlsx";
                                        },
                                        dataBound: onDataBoundEuClass
                                    });

                                    $("#gridEUMonthClass").data("kendoGrid").dataSource.read();
                            }


                    function detailInit(e) {

                        var jsonCData = JSON.stringify({ fYrMo: $("#fYrMo").val().trim().toLowerCase(), groupings: $("#Groupings").val().trim().toLowerCase(), classification: $("#Classification").val().trim().toLowerCase(), connector: e.data.Connector });

                        $.ajax({
                            url: '/Home/SpDashboardEUMonthCClass/',
                            type: 'POST',
                            data: jsonCData,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                                $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsChildEu(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            group: [{field: "ParentVendorModel"}]
                                        },                                        
                                        filter: { field: "Connector", operator: "eq", value: e.data.Connector },
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundEuClass
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);    
                }
            });                                   

                var gridOutsClass = $("#gridOutsMonthClass").data("kendoGrid");
                    gridOutsClass.destroy();
                    $("#gridOutsMonthClass").empty();
                 
                    
                    $.ajax({
                        url: '/Home/SpDashboardOutsMonthPClass',
                        type: 'POST',
                        data: jsonData,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {
                        
                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsOuts(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridOutsMonthClass").kendoGrid({
                                toolbar: ["excel"],
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    pageSize: 100,                                    
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: (true ? false: true),
                                    buttonCount: 5
                                },                            
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,                            
                                detailInit: detailInitOuts,
                                excelExport: function(e) {                                    
                                                var timestamp = new Date().format("yyyyMMddHHmmss");
                                                e.workbook.fileName = "OutsPerOperation" + "-" + classification + "_" + fYrMo + "_" + timestamp + ".xlsx";
                                        },
                                dataBound: onDataBoundOutsClass
                            });

                            $("#gridOutsMonthClass").data("kendoGrid").dataSource.read();                                                                    
                    }


                    function detailInitOuts(e) {

                        var jsonCDataOuts = JSON.stringify({ fYrMo: $("#fYrMo").val().trim().toLowerCase(), groupings: $("#Groupings").val().trim().toLowerCase(), opClass: e.data.OpClass });

                        $.ajax({
                            url: '/Home/SpDashboardOutsMonthCClass/',
                            type: 'POST',
                            data: jsonCDataOuts,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                // Handle the beforeSend event

                                $("#spinner").show();
                            },
                           complete: function () {
                                // Handle the complete event

                                $("#spinner").hide();
                            },
                            success: function (data) {

                                var dateFields = [];
                                generateGrid(data.Data)

                                function generateGrid(gridData) {

                                    var model = generateModel(gridData[0]);
                                    var columns = generateColumnsChildOuts(gridData[0]);

                                    var parseFunction;
                                    if (dateFields.length > 0) {
                                        parseFunction = function (response) {
                                            for (var i = 0; i < response.length; i++) {
                                                for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                                    var record = response[i];
                                                    record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                                }
                                            }
                                            return response;
                                        };
                                    }

                                    var schema;
                                    if (parseFunction) {
                                        schema = {
                                            model: model,
                                            parse: parseFunction
                                        };
                                    } else {
                                        schema = {
                                            model: model
                                        };
                                    }                                  

                                    $("<div/>").appendTo(e.detailCell).kendoGrid({
                                        dataSource: {
                                            data: gridData,
                                            schema: schema,
                                            group: {field: "PackageGroup2"}
                                        },                                        
                                        filter: { field: "OpClass", operator: "eq", value: e.data.OpClass },
                                        columns: columns,
                                        editable: false,
                                        sortable: true,
                                        resizable: true,                                        
                                        dataBound: onDataBoundOutsCClass
                                    });

                                }  // ----------------------------------------- End of Create Grid Function ------------------------------------------------------//
                                             
                            },  // end of  success function... 

                            error: function (request, status, err) {
                                alert(status);+
                                alert(err);
                            } // end of on error function..

                        });     // End of ajax call children... 


                        //-------------------------------------------------------- Child Grid --------------------------------------------------------------//

                    }
                   
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });                                          
                var gridFGClass = $("#gridFgMonthClass").data("kendoGrid");
                    gridFGClass.destroy();
                    $("#gridFgMonthClass").empty();

                $.ajax({
                        url: '/Home/SpDashboardFgMonthClass',
                        type: 'POST',
                        data: jsonData,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        },
                       complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        },
                        success: function (data) {

                        var dateFields = [];
                        generateGrid(data.Data)

                        function generateGrid(gridData) {

                            var model = generateModel(gridData[0]);
                            var columns = generateColumnsFG(gridData[0]);

                            var parseFunction;
                            if (dateFields.length > 0) {
                                parseFunction = function (response) {
                                    for (var i = 0; i < response.length; i++) {
                                        for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                            var record = response[i];
                                            record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                        }
                                    }
                                    return response;
                                };
                            }

                            var schema;
                            if (parseFunction) {
                                schema = {
                                    model: model,
                                    parse: parseFunction
                                };
                            } 
                            else {
                                schema = {
                                    model: model
                                };
                            }

                            $("#gridFgMonthClass").kendoGrid({
                                toolbar: ["excel"],
//                                excel: {
//                                    fileName: "FGperClass.xlsx",
//                                    filterable: true
//                                },
                                dataSource: {
                                    data: gridData,
                                    schema: schema,
                                    group:  [{ field: "PackageGroup2"},
                                            { field: "PackageGroup3" }]                                   
                                },                                                       
                                columns: columns,
                                editable: false,
                                sortable: true,
                                resizable: true,
                                selectable: true,
                                excelExport: function(e) {                                    
                                                var timestamp = new Date().format("yyyyMMddHHmmss");
                                                e.workbook.fileName = "FinishedGoods" + "-" + classification + "_" + fYrMo + "_" + timestamp + ".xlsx";
                                        },
                                dataBound: function() {
                                           $('#gridFgMonthClass tbody .k-grouping-row:contains("N/A")').hide(); 
                                           $('.k-icon.k-i-collapse').hide();       
                                }                                                            
                            });

                            $("#gridFgMonthClass").data("kendoGrid").dataSource.read();                                        
                     }
                   
                },
                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                }
            });
                      

                     
            } // end of else

                kendoConsole.log("Selecting Node: " + selectedText + " Parent: " + parentText);                                   
            } 


            } // end of function
    

     //<!--/*{Start of columns, model recreation}*/-->

         function generateColumns(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                                                  

                            // check column datatype
                            switch (typeof gridData[dataItem]) {                                                                                              
                                case "string":
                                    if (dataItem == "ProductGroup")
                                    {
                                        columns.push({                                                                                                                
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight: bold" },
                                        groupHeaderTemplate: "#=value#",
                                        visible: true,
                                        hidden: true      
                                        });
                                    }
                                    else if (dataItem == "EquipmentFamily")
                                    {
                                        columns.push({                                                                                                                
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight: bold" },
                                        groupHeaderTemplate: "#=value#",
                                        visible: true,
                                        hidden: true      
                                        });
                                    }                                    
                                    else
                                    {
                                        columns.push({                                        
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });                                      
                                    }                                    
                                    break;

                                case "number":
                                default:
                                    if (dataItem == "TargetNo")
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                        format: "{0:P2}"
                                        });                                        
                                    }
                                    else 
                                    if (dataItem != "TargetNo")
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                        template: "# if ((" + dataItem + ") > TargetNo ) { #" +
                                                                        "<strong style='color: limegreen'>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } else { #" +
                                                                        "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } #"
                                        });                                      
                                    }
                                    else 
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });
                                    }                                    
                            }
                        }

                        return columns;

                    } // end of columns definition  
                    
                    
                    function generateColumnsChildEu(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                            

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    if (dataItem == "ParentVendorModel")
                                        {
                                            columns.push({                                                                                                                
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight: bold" },
                                            groupHeaderTemplate: "#=value#",
                                            visible: true,
                                            hidden: true      
                                            });
                                        }
                                    else 
                                    {
                                        columns.push({                                        
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });   
                                    }                                   
                                                                                                                                              
                                    break;

                                case "number":
                                default:
                                    if (dataItem == "TargetNo")
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                        format: "{0:P2}"
                                        });
                                    }
                                    else if (dataItem != "TargetNo")
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                        template: "# if ((" + dataItem + ")> TargetNo ) { #" +
                                                                        "<strong style='color: limegreen'>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } else { #" +
                                                                        "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } #"
                                        });                                      
                                    }
                                    else 
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });
                                    }
                                    
                            }


                        }

                        return columns;

                    } // end of columns definition    
                     

                    function generateColumnsOuts(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                            

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":                                    
                                    if (dataItem == "Operations")
                                    {
                                        columns.push({                                                                                                                
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: left; font-weight:bold; font-size:small;" }                                                                                
                                        });
                                    }
                                    else
                                    {
                                        columns.push({                                        
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });                                      
                                    }                                    
                                    break;

                                case "number":
                                default:                                                                      
                                    columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                    template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #"
                                    });                                                                       
                            }


                        }

                        return columns;

                    } // end of columns definition    


                    function generateColumnsChildOuts(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                            

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                        if (dataItem == "PackageGroup2") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true
                                                });
                                            } 
                                         else {
                                              columns.push({                                        
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                                    }); 
                                            }                                                              
                                    break;

                                case "number":
                                default:                                                                        
                                    columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                    template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #"
                                    });                                                                        
                            }
                        }

                        return columns;

                    } // end of columns definition  
                    
                    
                    function generateColumnsFG(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                              

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    if (dataItem == "PackageGroup2") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true

                                                });
                                            }
                                     else if (dataItem == "PackageGroup3") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true
                                                });
                                            } 
                                      else {                                    
                                        columns.push({                                        
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                            });   
                                        }                          
                                    break;
                                case "number":
                                default:                                            
                                    if (dataItem.includes('Target'))
                                    {
                                        columns.push({
                                            field: dataItem,
                                            title: "Target",
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                            format: "{0:N0}"
                                            });         
                                    }                                                              
                                    else
                                    {
                                        columns.push({
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                            template: "#= workWeekDetailsFG(data, '" + dataItem + "') #"
                                            });         
                                    }
                                                                                                  
                            }


                        }

                        return columns;

                    } // end of columns definition      
                    
                  
                  function generateColumnsEUPParent(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                              

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    if (dataItem == "ProductGroup") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true

                                                });
                                            }
                                     else if (dataItem == "EquipmentFamily") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true
                                                });
                                            } 
                                      else {                                    
                                        columns.push({                                        
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                            });   
                                        }                          
                                    break;
                                case "number":
                                default:                                            
                                    if (dataItem.includes('Target'))
                                    {
                                        columns.push({
                                            field: dataItem,
                                            title: "Target",
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                            format: "{0:P2}"
                                            });         
                                    }                                                              
                                    else if (dataItem != "TargetNo")
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
//                                        format: "{0:P2}"
                                        template: "# if ((" + dataItem + ") > TargetNo ) { #" +
                                                                        "<strong style='color: limegreen'>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } else { #" +
                                                                        "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } #"
                                        });                                      
                                    }
                                    else 
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });
                                    }                
                                                                                                  
                            }


                        }

                        return columns;

                    } // end of columns definition      
                                      
                  function generateColumnsEUPChild(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                              

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                    if (dataItem == "ParentVendorModel")
                                            {
                                                columns.push({                                                                                                                
                                                field: dataItem,
                                                title: colTitle,
                                                headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                attributes: { style: "text-align: center; font-weight: bold" },
                                                groupHeaderTemplate: "#=value#",
                                                visible: true,
                                                hidden: true      
                                                });
                                            }
                                    else
                                    {
                                        columns.push({                                        
                                            field: dataItem,
                                            title: colTitle,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                            });   
                                    }
                                    break;
                                case "number":
                                default:                                            
                                    if (dataItem.includes('Target'))
                                    {
                                        columns.push({
                                            field: dataItem,
                                            title: "Target",
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                            format: "{0:P2}"
                                            });         
                                    }                                                              
                                    else if (dataItem != "TargetNo")
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
//                                        format: "{0:P2}"
                                        template: "# if ((" + dataItem + ") > TargetNo ) { #" +
                                                                        "<strong style='color: limegreen'>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } else { #" +
                                                                        "<strong style='color: Red'><strong>#: kendo.format('{0:p2}', (" + dataItem + ")) #</strong>" +
                                                                        "# } #"
                                        });                                      
                                    }
                                    else 
                                    {
                                        columns.push({
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });
                                    }                
                                                                                                  
                            }


                        }

                        return columns;

                    } // end of columns definition   

                  function generateColumnsOWGParent(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                            

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":                                       
                                    columns.push({                                        
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        }); 
                                                                                                    
                                    break;

                                case "number":
                                default:  
                                
                                        var dataItem2 = "";

                                        var dataItem3 ="";

                                        var index = dataItem.indexOf('_');

                                        var index2 = dataItem.indexOf('_', index - 1);

                                        dataItem3 = dataItem.substring(0, index2) ;

                                        dataItem2 = dataItem.substring(index2 + 1) ;

                                        dataItem2 = dataItem3 + " " + dataItem2;

//                                        var dataItem4 = dataItem2.substr(dataItem2.length - 5);
                                        
                                    if (dataItem2.includes('Total')) {
                                    
                                        columns.push({
                                        field: dataItem,
                                        title: dataItem2,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                        template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #"
                                        }); 
                                    }

                                    else {
                                    
                                        var dataItem4 = dataItem2.slice(0,-5);

                                        columns.push({
                                        field: dataItem,
                                        title: dataItem4,
                                        headerAttributes: { style: "text-align: center; font-weight: bold" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                        template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #"
                                        }); 
                                    
                                    }
                                                                                                            
                                                                                                           
                            }
                        }

                        return columns;

                    } // end of columns definition
                    
                  function generateColumnsOWGChild(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;                            

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":
                                        if (dataItem == "PackageGroup2") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true
                                                });
                                            } 
                                         else if (dataItem == "PackageGroup3") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    width: 160,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }                                                    
                                                });
                                            } 
                                         else {
                                              columns.push({                                        
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                                    }); 
                                            }                                                              
                                    break;

                                case "number":
                                default:     
                                
                                        var dataItem2= "";

                                        var dataItem3="";

                                        var index = dataItem.indexOf('_');

                                        var index2 = dataItem.indexOf('_', index - 1);

                                        dataItem3 = dataItem.substring(0, index2) ;

                                        dataItem2 = dataItem.substring(index2 + 1) ;

                                        dataItem2 = dataItem3 + " " + dataItem2;

//                                        var dataItem4 = dataItem2.substr(dataItem2.length - 5);
                                                                                                        
                                    if (dataItem2.includes('Total')) {
                                    
                                         columns.push({
                                            field: dataItem,
                                            title: dataItem2,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                            template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #"
                                            });                                                                                                               
                                    } 
                                    
                                    else {
                                    
                                         var dataItem4 = dataItem2.slice(0,-5);

                                         columns.push({
                                            field: dataItem,
                                            title: dataItem4,
                                            headerAttributes: { style: "text-align: center; font-weight: bold" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                            template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #"
                                            });   
                                    
                                    
                                    }                           
                                                                                                                   
                                                                                                        
                            }
                        }

                        return columns;

                    } // end of columns definition  
                        
                  function generateColumnsFGW(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;  
                          //  var target = "_Target_Qty";

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":  
                                    if (dataItem == "PackageGroup2") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true

                                                });
                                            }
                                     else if (dataItem == "PackageGroup3") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" },
                                                    groupHeaderTemplate: "#= value #",
                                                    visible: true,
                                                    hidden: true
                                                });
                                            } 
                                      else {
                                           columns.push({                                        
                                        field: dataItem,
                                        title: colTitle,
                                        headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                        attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                        });     
                                       }                                                                                                 
                                    break;

                                case "number":
                                default:                                            
                                    if (dataItem.includes('Target'))
                                    {
                                        columns.push({
                                            field: dataItem,
                                            title: "Target",
                                            headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                            format: "{0:N0}"
                                            });         
                                    }
                                    else if (dataItem.includes('TotalQty'))
                                    {
                                    
                                     columns.push({
                                            field: dataItem,
                                            title: "Total Qty",
                                            headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                            attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                            template: "#= workWeekDetailsFGW(data, '" + dataItem + "') #"
                                           
                                           });         
                                    
                                    }                                                              
                                    else
                                    {
                                       
                                        var dataItem2= "";

                                        var dataItem3="";

                                        var index = dataItem.indexOf('_');

                                        var index2 = dataItem.indexOf('_', index - 1);

                                        dataItem3 = dataItem.substring(0, index2) ;

                                        dataItem2 = dataItem.substring(index2 + 1) ;

                                        dataItem2 = dataItem3 + " " + dataItem2;

//                                         var dataItem4 = dataItem2.substr(dataItem2.length - 5);                                        

                                        if (dataItem2.includes('Total')) {
                                        
                                            columns.push({
                                                field: dataItem,
                                                title: dataItem2,
                                                headerAttributes: { style: "text-align: center; font-weight: bold; " },
                                                attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                                template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #" 
                                                }); 
                                        }

                                        else {
                                        
                                            var dataItem4 = dataItem2.slice(0,-5);

                                            columns.push({
                                                field: dataItem,
                                                title: dataItem4,
                                                headerAttributes: { style: "text-align: center; font-weight: bold; " },
                                                attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                                template: "#= ((" + dataItem + ") == 0) ? '' : kendo.format('{0:N0}', (" + dataItem + ")/1000) #" 
                                                }); 
                                        
                                        }
                                                
                                    }
                                                                                                  
                            }


                        }

                        return columns;

                    } // end of columns definition     
                    

                    function generateColumnsAssyWip(gridData) {

                        // initiate the column array
                        var columns = [];                                                                                            

                        // iterate all of the data items in the first element of the returned JSON data
                        for (var dataItem in gridData) {

                            var colTitle = dataItem;  
                          //  var target = "_Target_Qty";

                            // check column datatype
                            switch (typeof gridData[dataItem]) {
                                case "string":  
                                    if (dataItem == "Operation") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold; font-size:small;" }                                                  
                                                    });
                                    } 
                                    else if (dataItem == "AsOf") {
                                                columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                                    attributes: { style: "text-align: center; font-weight: bold" }, 
                                                    groupHeaderTemplate: "#= kendo.format('{0:MMM dd}', value) # at <#= kendo.format('{0:hhtt}', value) #>",
                                                    visible: true,
                                                    hidden: true                                                 
                                                    });
                                    }                                       
                                    else {
                                           columns.push({                                        
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                                    });     
                                    }                                                                                                 
                                    break;

                                case "number":
                                default:
                                            columns.push({
                                                    field: dataItem,
                                                    title: colTitle,
                                                    headerAttributes: { style: "text-align: center; font-weight: bold; vertical-align: middle" },
                                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                                    format: "{0:N0}"
                                                    }); 
                                }
                        }

                        return columns;

                    } // end of columns definition    
                    
                     
                     // start of AssyModel3001

                       function generateAssyModel(gridData) {
                        var model = {};
                        model.id = "Connector";
                        var fields = {};
                        for (var property in gridData) {
                            var propType = typeof gridData[property];

                            if (propType == "number") {
                                fields[property] = {
                                    type: "number",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "boolean") {
                                fields[property] = {
                                    type: "boolean",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "string") {
                                var parsedDate = kendo.parseDate(gridData[property]);
                                if (parsedDate) {
                                    fields[property] = {
                                        type: "date",
                                        validation: {
                                            required: true
                                        }
                                    };
                                    dateFields.push(property);
                                } else {
                                    fields[property] = {
                                        validation: {
                                            required: true
                                        }
                                    };
                                }
                            } else {
                                fields[property] = {
                                    validation: {
                                        required: true
                                    }
                                };
                            }
                        }
                        model.fields = fields;

                        return model;
                    } 

                     // end of AssyModel3001


                    function generateModel(gridData) {
                        var model = {};
                        model.id = "ID";
                        var fields = {};
                        for (var property in gridData) {
                            var propType = typeof gridData[property];

                            if (propType == "number") {
                                fields[property] = {
                                    type: "number",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "boolean") {
                                fields[property] = {
                                    type: "boolean",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "string") {
                                var parsedDate = kendo.parseDate(gridData[property]);
                                if (parsedDate) {
                                    fields[property] = {
                                        type: "date",
                                        validation: {
                                            required: true
                                        }
                                    };
                                    dateFields.push(property);
                                } else {
                                    fields[property] = {
                                        validation: {
                                            required: true
                                        }
                                    };
                                }
                            } else {
                                fields[property] = {
                                    validation: {
                                        required: true
                                    }
                                };
                            }
                        }
                        model.fields = fields;

                        return model;
                    } 



                    function generateModelAssyWip(gridData) {
                        var model = {};
                        model.id = "ID";
                        var fields = {};
                        for (var property in gridData) {
                            var propType = typeof gridData[property];

                            if (propType == "number") {
                                fields[property] = {
                                    type: "number",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "boolean") {
                                fields[property] = {
                                    type: "boolean",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "string") {
                                var parsedDate = kendo.parseDate(gridData[property]);
                                if (parsedDate) {
                                    fields[property] = {
                                        type: "date",
                                        validation: {
                                            required: true
                                        }
                                    };
//                                    dateFields.push(property);
                                } else {
                                    fields[property] = {
                                        validation: {
                                            required: true
                                        }
                                    };
                                }
                            } else {
                                fields[property] = {
                                    validation: {
                                        required: true
                                    }
                                };
                            }
                        }
                        model.fields = fields;

                        return model;
                    }


           // -------------------------------------------   test out model ---------------------------- //

            function generateModelTestOut(gridData) {
                        var model = {};
                        model.id = "Connector";
                        var fields = {};
                        for (var property in gridData) {
                            var propType = typeof gridData[property];

                            if (propType == "number") {
                                fields[property] = {
                                    type: "number",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "boolean") {
                                fields[property] = {
                                    type: "boolean",
                                    validation: {
                                        required: true
                                    }
                                };
                            } else if (propType == "string") {
                                var parsedDate = kendo.parseDate(gridData[property]);
                                if (parsedDate) {
                                    fields[property] = {
                                        type: "date",
                                        validation: {
                                            required: true
                                        }
                                    };
                                    dateFields.push(property);
                                } else {
                                    fields[property] = {
                                        validation: {
                                            required: true
                                        }
                                    };
                                }
                            } else {
                                fields[property] = {
                                    validation: {
                                        required: true
                                    }
                                };
                            }
                        }
                        model.fields = fields;

                        return model;
                    }
          
             // ------------------------------------------- end test out model ---------------------------- //

        //  /*{End of columns, model recreation}*/

        function onDataBoundEuClass()
        {                        
            this.hideColumn("Connector");            
            this.hideColumn("PackageGroup1");                           
        }

        function onDataBoundFGW()
        {
         this.hideColumn("ProductGroup");
        }

        function onDataBoundFGWC()
        {
         this.hideColumn("PackageGroup1");
         $('#gridFGClass tbody .k-grouping-row:contains("N/A")').hide(); 
         $('.k-icon.k-i-collapse').hide(); 
        }

        
        function removeWipHeader()
        {         
         $('#gridWIPClass tbody .k-grouping-row:contains("N/A")').hide(); 
         $('.k-icon.k-i-collapse').hide(); 
        }

        function onDataBoundEuGroups()
        {                       
            this.hideColumn("Connector");                                   
            this.hideColumn("ProductGroup");                    
        }
       

        function onDataBoundOutsClass()
        {
            this.hideColumn("OpClass");     
            this.hideColumn("FYrMo");         
            this.hideColumn("Classification");                                     
        }

        function onDataBoundOutsCClass()
        {
            this.hideColumn("OpClass");     
            this.hideColumn("Operation_Desc"); 
            $('#gridOutsMonthClass tbody .k-grouping-row:contains("N/A")').hide(); 
            $('.k-icon.k-i-collapse').hide();                                                        
        }

        
        function removeNA()
        {            
            $('#gridINV tbody .k-grouping-row:contains("N/A")').hide(); 
         //   $('#gridInvStocksParent tbody .k-grouping-row:contains("N/A")').hide(); 
            $('.k-icon.k-i-collapse').hide();                                                        
        }

        function onDataBoundOutsGroups()
        {             
            this.hideColumn("OpClass");   
            this.hideColumn("FYrMo");                             
            this.hideColumn("ProductGroup");                
        }
        
        function onDataBoundEquipUtil()
        {             
            this.hideColumn("Connector");                                            
            this.hideColumn("ProductGroup");  
            this.hideColumn("PackageGroup1");                            
        }
        

         function onDataBoundOWGChild()
        {             
            this.hideColumn("OpClass");  
            this.hideColumn("ProductGroup");    
            this.hideColumn("Operation_Desc");
            
            $('#gridOutsPClass tbody .k-grouping-row:contains("N/A")').hide(); 
            $('.k-icon.k-i-collapse').hide();                                                        
        }

        function onTreeviewMonthlyChange(e) {
            var parent;
            var parentText;

            var selected = treeviewMonthly.select()
            var getitem = treeviewMonthly.dataItem(selected);
            var selectedText = treeviewMonthly.text(selected);  //e.sender._current.context.innerText.trim();

            parent = treeviewMonthly.parent(treeviewMonthly.findByUid(getitem.uid));

            if (parent.length > 0 ) {
                parentText = treeviewMonthly.text(parent);
            }
            else {
                // get the current selected text for parent
                parentText = selectedText;
            }

            kendoConsole.log("Selected Change " + selectedText + " Parent: " + parentText);                                                            
        }

        function onTreeviewMonthlyCollapse(e) {

            kendoConsole.log("Collapsing " + treeviewMonthly.text(e.node));

            // Select the current expanded node.
            treeviewMonthly.select(e.node);
        }

        function onTreeviewMonthlyExpand(e) {

            kendoConsole.log("Expanding " + treeviewMonthly.text(e.node));

            // Select the current expanded node.
            treeviewMonthly.select(e.node);
        }

        //------- End Treeview Monthly -----------------------------------------------------------------------------------------


        // Check Treeview groupings
        function checkNodeParent(parent, value) {
            var results = -1; // default or not found 

            //if (parent = "TEST") {
                results = testGroups.indexOf(parent);         // Test
//            }
//            else if (parent = "ASSEMBLY") {
//                results = assemblyGroups.indexOf(value);     // Group
//            } 
                        
            // return the result
            return results;
        }

        // Console Window
        function getWidth() {
            return $(window).width();
        }

        // Console Window
        function getHeight() {
            return $(window).height();
        }

        // Splitter 
        // Show = true
        // Hide = false
        function toggleCenterPane(value) {
            splitterElement = $("#horizontal");
            var splitter = splitterElement.data("kendoSplitter");
            //var centerPane = $("#center-pane");
            //splitter[centerPane.width() > 0 ? "collapse" : "expand"](centerPane);            
            //splitter[(value ? "collapse" : "expand")](centerPane);            
            //splitter.toggle("#center-pane", value);

            if (value){

                splitter.expand("#center-pane");
                treeviewMonthly.enable(".k-item", true);

            } else 
            {
                splitter.collapse("#center-pane");
                treeviewMonthly.enable(".k-item", false);
            }

        }      

    //------- Start Tab1  -----------------------------------------------------------------------------------------

        function onShowTab1(e) {
                kendoConsole.log("Shown: " + $(e.item).find("> .k-link").text());
            }

        function onSelectTab1(e) {

               //   kendoConsole.log("Selected: " + $(e.item).find("> .k-link").text());
                
              //   alert("Selected: " + $(e.item).find("> .k-link").text());

                var  select = $(e.item).find("> .k-link").text();

                if(select.trim().toLowerCase() == "weekly moves to fg")
                {
                      $('#fontawesometext').css("color","white");
                      $('#tabFGFont').css("color","white");

                      $('#fontawesometext1').css("color","#555");
                      $('#tabFGInvFont').css("color", "#555");

                      $('#fontawesometext2').css("color","#555");
                      $('#tabAsmbldInvFont').css("color", "#555");

                      $('#fontawesometext3').css("color","#555");
                      $('#tabYldFont').css("color", "#555");
                    
                }
                else if (select.trim().toLowerCase() == "weekly fg inventory")
                {
                      $('#fontawesometext').css("color","#555");
                      $('#tabFGFont').css("color","#555");

                      $('#fontawesometext1').css("color","white");
                      $('#tabFGInvFont').css("color", "white");

                      $('#fontawesometext2').css("color","#555");
                      $('#tabAsmbldInvFont').css("color", "#555");

                      $('#fontawesometext3').css("color","#555");
                      $('#tabYldFont').css("color", "#555");

                }

                else if (select.trim().toLowerCase() == "weekly asmbld goods inventory")
                {
                
                      $('#fontawesometext').css("color","#555");
                      $('#tabFGFont').css("color","#555");

                      $('#fontawesometext1').css("color","#555");
                      $('#tabFGInvFont').css("color", "#555");

                      $('#fontawesometext2').css("color","white");
                      $('#tabAsmbldInvFont').css("color", "white");

                      $('#fontawesometext3').css("color","#555");
                      $('#tabYldFont').css("color", "#555");

                }

                else if (select.trim().toLowerCase() == "yield")
                {

                      $('#fontawesometext').css("color","#555");
                      $('#tabFGFont').css("color","#555");

                      $('#fontawesometext1').css("color","#555");
                      $('#tabFGInvFont').css("color", "#555");

                      $('#fontawesometext2').css("color","#555");
                      $('#tabAsmbldInvFont').css("color", "#555");

                      $('#fontawesometext3').css("color","white");
                      $('#tabYldFont').css("color", "white");
                }
              
            
            }

        function onActivateTab1(e) {
            kendoConsole.log("Activated: " + $(e.item).find("> .k-link").text());
                
                $(".k-pager-refresh").trigger('click');

            }

        function onContentLoadTab1(e) {
            kendoConsole.log("Content loaded in <b>"+ $(e.item).find("> .k-link").text() + "</b> and starts with <b>" + $(e.contentElement).text().substr(0, 20) + "...</b>");
            }

        function onErrorTab1(e){
            kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
            }

    //------- End Tab1  -----------------------------------------------------------------------------------------

    //------- Start Tab2  -----------------------------------------------------------------------------------------

        function onShowTab2(e) {
                kendoConsole.log("Shown: " + $(e.item).find("> .k-link").text());
            }

        function onSelectTab2(e) {
            kendoConsole.log("Selected: " + $(e.item).find("> .k-link").text());              

            }

        function onActivateTab2(e) {
            kendoConsole.log("Activated: " + $(e.item).find("> .k-link").text());
            }

        function onContentLoadTab2(e) {
            kendoConsole.log("Content loaded in <b>"+ $(e.item).find("> .k-link").text() + "</b> and starts with <b>" + $(e.contentElement).text().substr(0, 20) + "...</b>");
            }

        function onErrorTab2(e){
            kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
            }

    //------- End Tab2 -----------------------------------------------------------------------------------------

    //------- Start Tab3  -----------------------------------------------------------------------------------------

        function onShowTab3(e) {
                kendoConsole.log("Shown: " + $(e.item).find("> .k-link").text());
            }

        function onSelectTab3(e)
        {

            //kendoConsole.log("Selected: " + $(e.item).find("> .k-link").text());

            var  selectTab3 = $(e.item).find("> .k-link").text().toLowerCase().toString().trim();

             if(selectTab3 == "outs per operation")
                {
                      $('#fontawesome4').css("color","white");
                      $('#tabOutsPerOperation').css("color","white");

                      $('#fontawesome5').css("color","#555");
                      $('#tabShiftlyMovesToFG').css("color", "#555");

                      $('#fontawesome6').css("color","#555");
                      $('#tabEU').css("color", "#555");

                     
                    
                }
                else if (selectTab3 == "shiftly moves to fg")
                {
                      $('#fontawesome5').css("color","white");
                      $('#tabShiftlyMovesToFG').css("color","white");

                      $('#fontawesome4').css("color","#555");
                      $('#tabOutsPerOperation').css("color","#555");

                      $('#fontawesome6').css("color","#555");
                      $('#tabEU').css("color", "#555");


                }

                else if (selectTab3 == "equipment utilization")
                {
                
                      $('#fontawesome6').css("color","white");
                      $('#tabEU').css("color","white");

                      $('#fontawesome4').css("color","#555");
                      $('#tabOutsPerOperation').css("color", "#555");

                      $('#fontawesome5').css("color","#555");
                      $('#tabShiftlyMovesToFG').css("color","#555");

                }


        }

        function onActivateTab3(e) {
            kendoConsole.log("Activated: " + $(e.item).find("> .k-link").text());
            }

        function onContentLoadTab3(e) {
            kendoConsole.log("Content loaded in <b>"+ $(e.item).find("> .k-link").text() + "</b> and starts with <b>" + $(e.contentElement).text().substr(0, 20) + "...</b>");
            }

        function onErrorTab3(e){
            kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
            }

    //------- End Tab3  -----------------------------------------------------------------------------------------

   

    //------- Start Tab5  -----------------------------------------------------------------------------------------

        function onShowTab5(e) {
                kendoConsole.log("Shown: " + $(e.item).find("> .k-link").text());
            }

        function onSelectTab5(e) {
           
                  //  alert("Selected: " + $(e.item).find("> .k-link").text());

                    var tabSelected = $(e.item).find("> .k-link").text().replace(" ", "").toLowerCase().toString().trim()
                    


                    if(tabSelected == "outs3995")
                    {

                      $('#assyFontAwesomeText1').css("color","white");
                      $('#tabAssy3995Font').css("color","white");

                      $('#assyFontAwesomeText').css("color","#555");
                      $('#tabAssy3001Font').css("color", "#555");

                      $('#assyFontAwesomeText2').css("color","#555");
                      $('#tabAssy6000Font').css("color", "#555");

                        $('#hidAssyOperation').val("3995");
                    
                        var gridAssyOutput3995 = $("#gridAssyOutput3995").data("kendoGrid");
                       
                        gridAssyOutput3995.destroy();
                        $("#gridAssyOutput3995").empty();

                            $.ajax({
                                url: '/Home/SpDashboardAssyOutput3995',
                                type: 'POST',
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                beforeSend: function () {
                                    // Handle the beforeSend event

                                    $("#spinner").show();
                                },
                                complete: function () {
                                    // Handle the complete event

                                    $("#spinner").hide();
                                },

                                success: function (data) {

                                    var dateFields = [];
                                  
                                    generateGrid(data.Data)

                                    
                            },
                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            }
                        });
                    
                    }

                    else if (tabSelected == "outs6000")
                    {

                      $('#assyFontAwesomeText2').css("color","white");
                      $('#tabAssy6000Font').css("color","white");

                      $('#assyFontAwesomeText').css("color","#555");
                      $('#tabAssy3001Font').css("color", "#555");

                      $('#assyFontAwesomeText1').css("color","#555");
                      $('#tabAssy3995Font').css("color", "#555");


                        $('#hidAssyOperation').val("6000");

                        var gridAssyOutput6000 = $("#gridAssyOutput6000").data("kendoGrid");
                        gridAssyOutput6000.destroy();
                        $("#gridAssyOutput6000").empty();

                            $.ajax({
                                url: '/Home/SpDashboardAssyOutput6000',
                                type: 'POST',
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                beforeSend: function () {
                                    // Handle the beforeSend event

                                    $("#spinner").show();
                                },
                                complete: function () {
                                    // Handle the complete event

                                    $("#spinner").hide();
                                },

                                success: function (data) {

                                   
                                    generateGridAssyOuts6000(data.Data)

                                   
                            },
                            error: function (request, status, err) {
                                alert(status);
                                alert(err);
                            }
                        
                        });
                    
                    }

                    else if (tabSelected == "outs3001" )
                    {

                      $('#assyFontAwesomeText').css("color","white");
                      $('#tabAssy3001Font').css("color","white");

                      $('#assyFontAwesomeText1').css("color","#555");
                      $('#tabAssy3995Font').css("color", "#555");

                      $('#assyFontAwesomeText2').css("color","#555");
                      $('#tabAssy6000Font').css("color", "#555");

                        $('#hidAssyOperation').val("3001");
                    
                    }


           
            }

        function onActivateTab5(e) {
            kendoConsole.log("Activated: " + $(e.item).find("> .k-link").text());  
                
                $(".k-pager-refresh").trigger('click');

            }

        function onContentLoadTab5(e) {
            kendoConsole.log("Content loaded in <b>"+ $(e.item).find("> .k-link").text() + "</b> and starts with <b>" + $(e.contentElement).text().substr(0, 20) + "...</b>");
                
            }

        function onErrorTab5(e){
            kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
            }

    //------- End Tab5 -----------------------------------------------------------------------------------------


    //------- Start Tab6  -----------------------------------------------------------------------------------------

        function onShowTab6(e) {
                kendoConsole.log("Shown: " + $(e.item).find("> .k-link").text());
            }

        function onSelectTab6(e) {
            kendoConsole.log("Selected: " + $(e.item).find("> .k-link").text());
            }

        function onActivateTab6(e) {
            kendoConsole.log("Activated: " + $(e.item).find("> .k-link").text());                                 
            }

        function onContentLoadTab6(e) {
            kendoConsole.log("Content loaded in <b>"+ $(e.item).find("> .k-link").text() + "</b> and starts with <b>" + $(e.contentElement).text().substr(0, 20) + "...</b>");                
            }

        function onErrorTab6(e){
            kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
            }

      //------- End Tab6 -----------------------------------------------------------------------------------------


         $(document).on('click', '.pckgeGroup1', function (e) {

            var gview = $("#gridTestOutput").data("kendoGrid");
            var row = $(this).closest("tr");
            var item = gview.dataItem(row);                   

            var grpPkg = item.PackageGroup1;        
        
           // $("#grpPkgWw").val(grpPkg);

            var grid = $('#gridTestOutput').data("kendoGrid");

            var tr = $(e.target).closest("tr"); //get the row
            var data = grid.dataItem(tr);

            var Connector = data.Connector;

            var jsonTestOutputChild = JSON.stringify({ connector: Connector });

            var gridTestOutput = $("#gridTestOutputChild").data("kendoGrid");
            gridTestOutput.destroy();
            $("#gridTestOutputChild").empty();


            $.ajax({
                url: '/Home/SpDashboardTestOutput_child/',
                type: 'POST',
                data: jsonTestOutputChild,
                datatype: 'json',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    // Handle the beforeSend event

                    $("#spinner").show();
                },
                complete: function () {
                    // Handle the complete event

                    $("#spinner").hide();
                },
                success: function (data) {

                    var dateFields = [];
                    generateGrid(data.Data)

                    function generateGrid(gridData) {

                        var model = generateModel(gridData[0]);
                        var columns = generateColumnsTestOutputChild(gridData[0]);
                        var aggregates_ = generateAggregatesTestOutChild(gridData[0]);

                        var parseFunction;
                        if (dateFields.length > 0) {
                            parseFunction = function (response) {
                                for (var i = 0; i < response.length; i++) {
                                    for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                        var record = response[i];
                                        record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                    }
                                }
                                return response;
                            };
                        }

                        var schema;
                        if (parseFunction) {
                            schema = {
                                model: model,
                                parse: parseFunction
                            };
                        } else {
                            schema = {
                                model: model
                            };
                        }


                        $("#gridTestOutputChild").kendoGrid({
                            toolbar: ["excel"],
                            dataSource: {
                                data: gridData,
                                schema: schema,
                                pageSize: 100,
                                group: { field: "PackageGroup2", aggregates: aggregates_ },
                                aggregate: aggregates_
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: false,
                                buttonCount: 5
                            },
                            columns: columns,
                            //   editable: "popup",
                            sortable: true,
                            resizable: true,
                            selectable: "single cell",
                            excelExport: function (e) {
                                var timestamp = new Date().format("yyyyMMddHHmmss");
                                e.workbook.fileName = "gridTestOutputChild" + "_" + timestamp + ".xlsx";
                            }
                        })

                        $("#gridTestOutputChild").data("kendoGrid").dataSource.read();


                    }


                    //   -------------------------------- End of Create Grid Function ------------------------------------------------------//

                },  // end of  success function... 

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                } // end of on error function..

            });     // End of ajax call children... 


            function generateColumnsTestOutputChild(gridData) {

                // initiate the column array
                var columns = [];

                // iterate all of the data items in the first element of the returned JSON data
                for (var dataItem in gridData) {

                    var colTitle = dataItem;

                    // check column datatype
                    switch (typeof gridData[dataItem]) {
                        case "string":
                            if (dataItem == "PackageGroup2") {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight: bold" },
                                    groupHeaderTemplate: "#= value #",
                                    visible: true,
                                    hidden: true
                                });
                            }
                            else if (dataItem == "Connector") {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,                                    
                                    visible: false,
                                    hidden: true
                                });
                            }
                            else if (dataItem == "PackageGroup3") {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    width: 200,
                                    locked: true,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },                                   
                                    footerAttributes: { style: "text-align: left; font-size:small;" },
                                    groupFooterTemplate: "Sub Total : "                                             
                                });
                            }
                            else {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    width: 100,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                });
                            }
                            break;

                        case "number":
                        default:
                            if (dataItem.includes('Target'))
                                columns.push({
                                    field: dataItem,
                                    title: "Target",
                                    width: 100,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                    template: "#= workWeekDetailsTestOutputTarget(data, '" + dataItem + "') #",
                                    format: "{0:N0}",
                                    aggregates: ["sum"],
                                    footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },
                                    groupFooterTemplate: "#: kendo.format('{0:N0}', sum/1000) #"                                                                                 
                                });
                            else {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    width: 100,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                    template: "#= workWeekDetailsTestOutput(data, '" + dataItem + "') #",
                                    aggregates: ["sum"],
                                    footerAttributes: { style: "text-align: center; font-size:small; color: Blue" },
                                    groupFooterTemplate: "#: kendo.format('{0:N0}', sum/1000) #"                                                                                          
                                });
                            }
                    }
                }

                return columns;

            } // end of columns definition             


            function generateAggregatesTestOutChild(gridData) {

                var aggregates = [];

                // iterate all of the data items in the first element of the returned JSON data
                for (var dataItem in gridData) {

                    // check column datatype
                    switch (typeof gridData[dataItem]) {
                        case "string":
                            aggregates.push({
                                field: dataItem,
                                aggregate: "count"
                            });
                            break;
                        case "number":
                        default:
                            if (dataItem.includes('Target'))
                                aggregates.push({
                                    field: dataItem,
                                    aggregate: "sum"
                                });
                            else {
                                aggregates.push({
                                    field: dataItem,
                                    aggregate: "sum"
                                });
                            }
                    }
                }
                return aggregates;
            }


            winPackageGroupChild(grpPkg);


        }); 

        $(document).on('click', '.pckgeGroup1Yield', function (e) {

//            alert("sas");

            var gview = $("#gridTestYield").data("kendoGrid");
            var row = $(this).closest("tr");
            var item = gview.dataItem(row);                   

            var grpPkg2Yield = item.PackageGroup1;                           

            var grid = $('#gridTestYield').data("kendoGrid");

            var tr = $(e.target).closest("tr"); //get the row
            var data = grid.dataItem(tr);

            var Connector = data.Connector;

            var jsonTestYieldChild = JSON.stringify({ connector: Connector });

            var gridTestYieldChild = $("#gridTestYieldChild").data("kendoGrid");
            gridTestYieldChild.destroy();
            $("#gridTestYieldChild").empty();


            $.ajax({
                url: '/Home/SpDashboardTestYield_child/',
                type: 'POST',
                data: jsonTestYieldChild,
                datatype: 'json',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    // Handle the beforeSend event

                    $("#spinner").show();
                },
                complete: function () {
                    // Handle the complete event

                    $("#spinner").hide();
                },
                success: function (data) {

                    var dateFields = [];
                    generateGrid(data.Data)

                    function generateGrid(gridData) {

                        var model = generateModel(gridData[0]);
                        var columns = generateColumnsTestYieldChild(gridData[0]);
                        var aggregates_ = generateAggregatesTestYieldChild(gridData[0]);

                        var parseFunction;
                        if (dateFields.length > 0) {
                            parseFunction = function (response) {
                                for (var i = 0; i < response.length; i++) {
                                    for (var fieldIndex = 0; fieldIndex < dateFields.length; fieldIndex++) {
                                        var record = response[i];
                                        record[dateFields[fieldIndex]] = kendo.parseDate(record[dateFields[fieldIndex]]);
                                    }
                                }
                                return response;
                            };
                        }

                        var schema;
                        if (parseFunction) {
                            schema = {
                                model: model,
                                parse: parseFunction
                            };
                        } else {
                            schema = {
                                model: model
                            };
                        }


                        $("#gridTestYieldChild").kendoGrid({
                            toolbar: ["excel"],
                            dataSource: {
                                data: gridData,
                                schema: schema,
                                pageSize: 100,
                                group: { field: "PackageGroup2", aggregates: aggregates_ },
                                aggregate: aggregates_
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: false,
                                buttonCount: 5
                            },
                            columns: columns,                            
                            sortable: true,
                            resizable: true,
                            selectable: "single cell",
                            excelExport: function (e) {
                                var timestamp = new Date().format("yyyyMMddHHmmss");
                                e.workbook.fileName = "gridTestYieldChild" + "_" + timestamp + ".xlsx";
                            },
                            dataBound: function() 
                                        {
                                            this.hideColumn("ProductGroup");  
                                            this.hideColumn("PackageGroup1");     
                                        }   
                        })

                        $("#gridTestYieldChild").data("kendoGrid").dataSource.read();


                    }


                    //   -------------------------------- End of Create Grid Function ------------------------------------------------------//

                },  // end of  success function... 

                error: function (request, status, err) {
                    alert(status);
                    alert(err);
                } // end of on error function..

            });     // End of ajax call children... 

            function generateColumnsTestYieldChild(gridData) {

                // initiate the column array
                var columns = [];

                // iterate all of the data items in the first element of the returned JSON data
                for (var dataItem in gridData) {

                    var colTitle = dataItem;

                    // check column datatype
                    switch (typeof gridData[dataItem]) {
                        case "string":
                            if (dataItem == "PackageGroup2") {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight: bold" },
                                    groupHeaderTemplate: "#= value #",
                                    visible: true,
                                    hidden: true
                                });
                            }
                            else if (dataItem == "Connector") {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,                                    
                                    visible: false,
                                    hidden: true
                                });
                            }
                            else if (dataItem == "PackageGroup3") {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    width: 200,
                                    locked: true,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },                                   
                                    footerAttributes: { style: "text-align: left; font-size:small;" },
                                    groupFooterTemplate: "Sub Average : "                                             
                                });
                            }
                            else {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    width: 100,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" }
                                });
                            }
                            break;

                        case "number":
                        default:
                            if (dataItem.includes('Target'))
                                columns.push({
                                    field: dataItem,
                                    title: "Target",
                                    width: 100,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small; color: gray" },
                                    aggregates: ["average"],
                                    footerAttributes: { style: "text-align: center; font-size:small; color: gray" },
                                    groupFooterTemplate: "#: kendo.format('{0:N2}', average) #"                                                                                 
                                });
                            else {
                                columns.push({
                                    field: dataItem,
                                    title: colTitle,
                                    width: 100,
                                    headerAttributes: { style: "text-align: center; font-weight: bold" },
                                    attributes: { style: "text-align: center; font-weight:bold; font-size:small;" },
                                    template: "#= workWeekDetailsYield(data, '" + dataItem + "') #",
                                    aggregates: ["average"],
                                    footerAttributes: { style: "text-align: center; font-size:small;" },
                                    groupFooterTemplate: "#: kendo.format('{0:N2}', average) #"                                                                                          
                                });
                            }
                    }
                }

                return columns;

            } // end of columns definition             


            function generateAggregatesTestYieldChild(gridData) {

                var aggregates = [];

                // iterate all of the data items in the first element of the returned JSON data
                for (var dataItem in gridData) {

                    // check column datatype
                    switch (typeof gridData[dataItem]) {
                        case "string":
                            aggregates.push({
                                field: dataItem,
                                aggregate: "count"
                            });
                            break;
                        case "number":
                        default:
                            if (dataItem.includes('Target'))
                                aggregates.push({
                                    field: dataItem,
                                    aggregate: "average"
                                });
                            else {
                                aggregates.push({
                                    field: dataItem,
                                    aggregate: "average"
                                });
                            }
                    }
                }
                return aggregates;
            }

            winPackageGroupChildYield(grpPkg2Yield);


        }); 

      //------------------------- function remarks -----------------------------------------------------------------//


       function GetTimeNow() 
       {
    
            return '@System.DateTime.Now.ToString()';     
       }

        function itemdetails() {

        var testOutputID = $('#selectedGridCell').val();

        var dateToday = $('#DateTimeNow').val();

        var remarks = $('#remarks').val();
        

        return (testOutputID == "") ? null : {

                           TestOutputID: testOutputID
                         , DateCreated: dateToday
                         , Remarks: remarks
                         , DateModified: null

            };
        }

       
        function assyDetails(operation) {

        var assyOutputID = $('#selectedGridCell').val();

        var dateToday = GetTimeNow();

        var remarks = $('#remarksAssy').val();

        var currUser = $("#hidCurrUser").val();
        

        return (assyOutputID == "") ? null : {

                           AssemblyOutsID: assyOutputID
                         , Remarks: remarks == "" ? null : remarks
                         , Operation: operation == "" ? null : operation
                         , CreatedBy: currUser == "" ? null : currUser
                         , DateCreated: dateToday 
                         , ModifiedBy: null
                         , DateModified: null

            };
        }


        function loadDirtyflag(rowIndex, colIndex) 
        {
              
         var gview = $("#gridTestOutput").data("kendoGrid");

         gview.tbody.find("tr:eq(" + rowIndex + ") td:nth-child(" + colIndex + ")").addClass("note");
     
        }

       
        
        function addDirtyflag() 
        {
        
        var rowIndex = $("#hidRowIndex").val();

        var colIndex = parseInt($("#hidColIndex").val(), 10);

        colIndex = colIndex + 1;

        var gview = $("#gridTestOutput").data("kendoGrid");

        gview.tbody.find("tr:eq(" + rowIndex + ") td:nth-child(" + colIndex + ")").addClass("note");

       }

      


         function displayComments(id) 
         {

            //  var id = $("#cellIdForDisplaying").val();

             $.ajax({

             url: '/Grid/GetComments/'
                    , data: JSON.stringify({ id: id })
                    , type: 'POST'
                    , contentType: 'application/json'
                    , success: function (content) {

                        if (content === "null" || content === null) 
                        {

                            $("#varComments").val(null);

                        }

                        else 
                        {                                                

                            $("#varComments").val(content[0].Remarks);

                           //   $("#aa").val(content[0].Remarks);

                        }



                    }
                });

         }


          function displayAssyComments(id, ops) 
         {

            //  var id = $("#cellIdForDisplaying").val();

             $.ajax({

             url: '/Grid/GetAssyComments/'
                    , data: JSON.stringify({ id: id, operation: ops })
                    , type: 'POST'
                    , contentType: 'application/json'
                    , success: function (content) {

                      // alert(content[0].Remarks);

                        if (content === "null" || content === null) 
                        {

                           

                            $("#varAssyComments").val(null);

                        }

                        else 
                        {                                                

                            $("#varAssyComments").val(content[0].Remarks);

                        }



                    }
                });

         }





        // customize the _show method to call options.beforeShow 
        // to allow preventing the tooltip from being shown...
        kendo.ui.Tooltip.fn._show = function (show) {
        return function (target) {
            if (typeof this.options.beforeShow === "function") {
                var e = {
                    sender: this,
                    target: target,
                    preventDefault: function () {
                        this.isDefaultPrevented = true;
                    }
                }

                this.options.beforeShow.call(this, e);

                if (!e.isDefaultPrevented) {
                    // only show the tooltip if preventDefault() wasn't called..
                    show.call(this, target);
                }
              }
            };
        } (kendo.ui.Tooltip.fn._show);




         $(document).on('mouseover', '.abc', function (e) {

            var gview = $("#gridTestOutput").data("kendoGrid");
            var row = $(this).closest("tr");
            var item = gview.dataItem(row);
            var workWeek = $(this).attr('workWeek');

            var selectedValue = item.Connector + workWeek;
            selectedValue = selectedValue.replace(" ", "_");
       

            $("#cellIdForDisplaying").val(selectedValue);

            var grpPkgWw = item.PackageGroup1 + "_" + workWeek;        
        
            $("#grpPkgWw").val(grpPkgWw);

            var rIndex = $("tr", gview.tbody).index(row);
                
            var cIndex = gview.thead.find("th[data-field='" + workWeek + "']").index();

            cIndex = cIndex + 1;

            var hasClass = gview.tbody.find("tr:eq(" + rIndex + ") td:nth-child(" + cIndex + ")").hasClass("note");

            if (hasClass) 
            {

                displayComments(selectedValue);

            }

         });

         
              $(document).on('mouseover', '.assyOuts', function (e) {

             
                var gview = $("#gridAssyOutput3001").data("kendoGrid");
                var row = $(this).closest("tr");
                var item = gview.dataItem(row);
                var workWeek = $(this).attr('workWeek');

                var selectedValue = item.Connector + workWeek;
                selectedValue = selectedValue.replace(" ", "_");
       

               // $("#cellIdForDisplaying").val(selectedValue);

                var grpAssyPkgWw = item.PackageGroup + "_" + workWeek;        
        
                $("#grpAssyPkgWw").val(grpAssyPkgWw);

                var rIndex = $("tr", gview.tbody).index(row);
                
                var cIndex = gview.thead.find("th[data-field='" + workWeek + "']").index();

                cIndex = cIndex + 1;

                var hasClass = gview.tbody.find("tr:eq(" + rIndex + ") td:nth-child(" + cIndex + ")").hasClass("note");

                if (hasClass) 
                {

                    displayAssyComments(selectedValue, "3001");

                }

             });

               $(document).on('mouseover', '.assyOuts3995', function (e) {

             
                var gview = $("#gridAssyOutput3995").data("kendoGrid");
                var row = $(this).closest("tr");
                var item = gview.dataItem(row);
                var workWeek = $(this).attr('workWeek');

                var selectedValue = item.Connector + workWeek;
                selectedValue = selectedValue.replace(" ", "_");
       

               // $("#cellIdForDisplaying").val(selectedValue);

                var grpAssyPkgWw = item.PackageGroup + "_" + workWeek;        
        
                $("#grpAssyPkgWw").val(grpAssyPkgWw);

                var rIndex = $("tr", gview.tbody).index(row);
                
                var cIndex = gview.thead.find("th[data-field='" + workWeek + "']").index();

                cIndex = cIndex + 1;

                var hasClass = gview.tbody.find("tr:eq(" + rIndex + ") td:nth-child(" + cIndex + ")").hasClass("note");

                if (hasClass) 
                {

                    displayAssyComments(selectedValue, "3995");

                }

             });

              $(document).on('mouseover', '.assyOuts6000', function (e) {

             
                var gview = $("#gridAssyOutput6000").data("kendoGrid");
                var row = $(this).closest("tr");
                var item = gview.dataItem(row);
                var workWeek = $(this).attr('workWeek');

                var selectedValue = item.Connector + workWeek;
                selectedValue = selectedValue.replace(" ", "_");
       

               // $("#cellIdForDisplaying").val(selectedValue);

                var grpAssyPkgWw = item.PackageGroup + "_" + workWeek;        
        
                $("#grpAssyPkgWw").val(grpAssyPkgWw);

                var rIndex = $("tr", gview.tbody).index(row);
                
                var cIndex = gview.thead.find("th[data-field='" + workWeek + "']").index();

                cIndex = cIndex + 1;

                var hasClass = gview.tbody.find("tr:eq(" + rIndex + ") td:nth-child(" + cIndex + ")").hasClass("note");

                if (hasClass) 
                {

                    displayAssyComments(selectedValue, "6000");

                }

             });

         function callRemarksBox(action) {

            var open = action;

            var remarks = $("#varComments").val();

            var grpPkg = $("#grpPkgWw").val();  

            var winElement = $("#win").kendoWindow({
                width: 300,
                height: 200,
                visible: false,
                modal: true,
                resizable: false
              //  title: "<span style='color: Black; font-weight: Bold; text-font: Gothic Century'>" + grpPkg + "<span/> "
            });

            if (open === true) {


                $("#remarks").val(remarks);

                if ( remarks === "" || remarks === null) {

                    // save....

                    $("#spSave").html("&nbsp;&nbsp;Save");
                    $('#hidButtonVal').val("true");

                }

                // update....

                else {

                    $("#spSave").html("&nbsp;&nbsp;Update");
                    $('#hidButtonVal').val("false");


                }

                winElement.data("kendoWindow").title("<p style='font-weight:Bold'>" + grpPkg + "</p>").center().open();

            }

              else
                {
               // close the messagebox
            
                winElement.data("kendoWindow").close();
                }
         }

         function callAssyRemarksBox(action) {

            var open = action;

            var remarks = $("#varAssyComments").val();

            var grpPkg = $("#grpAssyPkgWw").val();  

            var winElement = $("#winAssy").kendoWindow({
                width: 300,
                height: 200,
                visible: false,
                modal: true,
                resizable: false
              //  title: "<span style='color: Black; font-weight: Bold; text-font: Gothic Century'>" + grpPkg + "<span/> "
            });

            if (open === true) {


                $("#remarksAssy").val(remarks);

                if ( remarks === "" || remarks === null) {

                    // save....

                    $("#spSaveAssy").html("&nbsp;&nbsp;Save");
                    $('#hidButtonVal').val("true");

                }

                // update....

                else {

                    $("#spSaveAssy").html("&nbsp;&nbsp;Update");
                    $('#hidButtonVal').val("false");


                }

                winElement.data("kendoWindow").title("<p style='font-weight:Bold'>" + grpPkg + "</p>").center().open();

            }

              else
                {
               // close the messagebox
            
                winElement.data("kendoWindow").close();
                }
         }
		
    

          $(document).on('click', '.testOutputChild', function (e) {
             alert("click");
             $('#materialsIISModal').modal({ show: true });
          });

          $(document).on('click', '.abc', function (e) {

            var gview = $("#gridTestOutput").data("kendoGrid");
            var row = $(this).closest("tr");

            var cell = gview.select();

            $("#hidRowIndex").val($("tr", gview.tbody).index(row));

            $("#hidColIndex").val(cell.index());


            var item = gview.dataItem(row);
            // var year = new Date().getFullYear();
            var workWeek = $(this).attr('workWeek');

            var selectedValue = item.Connector + workWeek;
            selectedValue = selectedValue.replace(" ", "_");
          

            $("#selectedGridCell").val(selectedValue);

            displayComments(selectedValue);

             getUserAcess();


           // callRemarksBox(true);

        });


         $(document).on('click', '.assyOuts', function (e) {

            var gview = $("#gridAssyOutput3001").data("kendoGrid");
            var row = $(this).closest("tr");

            var cell = gview.select();

            $("#hidRowIndex").val($("tr", gview.tbody).index(row));

            $("#hidColIndex").val(cell.index());


            var item = gview.dataItem(row);
            // var year = new Date().getFullYear();
            var workWeek = $(this).attr('workWeek');

            var selectedValue = item.Connector + workWeek;
            selectedValue = selectedValue.replace(" ", "_");
          

            $("#selectedGridCell").val(selectedValue);

           // displayAssyComments(selectedValue);

             getAssyUserAcess();


           // callRemarksBox(true);

        });


          $(document).on('click', '.assyOuts3995', function (e) {

            var gview = $("#gridAssyOutput3995").data("kendoGrid");
            var row = $(this).closest("tr");

            var cell = gview.select();

            $("#hidRowIndex").val($("tr", gview.tbody).index(row));

            $("#hidColIndex").val(cell.index());


            var item = gview.dataItem(row);
            // var year = new Date().getFullYear();
            var workWeek = $(this).attr('workWeek');

            var selectedValue = item.Connector + workWeek;
            selectedValue = selectedValue.replace(" ", "_");
          

            $("#selectedGridCell").val(selectedValue);

           // displayAssyComments(selectedValue);

             getAssyUserAcess();

        });

             $(document).on('click', '.assyOuts6000', function (e) {

            var gview = $("#gridAssyOutput6000").data("kendoGrid");
            var row = $(this).closest("tr");

            var cell = gview.select();

            $("#hidRowIndex").val($("tr", gview.tbody).index(row));

            $("#hidColIndex").val(cell.index());


            var item = gview.dataItem(row);
            // var year = new Date().getFullYear();
            var workWeek = $(this).attr('workWeek');

            var selectedValue = item.Connector + workWeek;
            selectedValue = selectedValue.replace(" ", "_");
          

            $("#selectedGridCell").val(selectedValue);

           // displayAssyComments(selectedValue);

             getAssyUserAcess();

        });


        $(document).on('click', '#saveAssy', function ()
        {
     
                 var assyOps = $('#hidAssyOperation').val();

                  $.ajax({

                     url: '/Grid/AddAssyOutComments/'
                    , data: JSON.stringify({ detailsAssy: assyDetails(assyOps) })
                    , type: 'POST'
                    , contentType: 'application/json'
                    , success: function (content) {


                           if(content == "addSuccess")
                           {
                              // addDirtyflag();
                               $(".k-pager-refresh").trigger('click');
                               
                               callAssyRemarksBox(false);
                              


                           }
                           else if(content == "updateSuccess")
                           {
                           
                           //  addDirtyflag();
                             $(".k-pager-refresh").trigger('click');
                             callAssyRemarksBox(false);
                            

                           }

                    }


            }); // end of jquery ajax request
        
        });  // end of saveAssy button click


       $(document).on('click', '#save', function () {


        $('#DateTimeNow').val(GetTimeNow());

        var btnStatus = $('#hidButtonVal').val();


        if (btnStatus.toLowerCase() == "true") {


            $.ajax({

                url: '/Grid/AddTestOutComments/'
                    , data: JSON.stringify({ details: itemdetails() })
                    , type: 'POST'
                    , contentType: 'application/json'
                    , success: function (content) {

                        $(".k-pager-refresh").trigger('click');
                    },

                complete: function () {

                  
                }
            });

          }

        //   if (btnStatus === false)

        else {


            $.ajax({

                url: '/Grid/UpdateComments/'
                    , data: JSON.stringify({ comments: itemdetails() })
                    , type: 'POST'
                    , contentType: 'application/json'
                    , success: function (content) { }
                    , complete: function () {

                        $(".k-pager-refresh").trigger('click');

                        $('#remarks').val("");


                    }
            });


        }


        callRemarksBox(false);

        addDirtyflag();


    });   // End of btnSave_Click function


    $(document).on('click', '#cancel', function () {

        callRemarksBox(false);
        
    });  // End of btnCancel_Click function    

    
    $(document).on('click', '#cancelAssy', function () {

         callAssyRemarksBox(false);
        
    });
   

    $(document).on('click', '#delete', function () {

        
        
         var delColID = parseInt($('#hidColIndex').val(), 10);

             delColID = delColID + 1;

               var gviewTest = $("#gridTestOutput").data("kendoGrid");

         $.ajax({

             url: '/Grid/DeleteComments/'
                    , data: JSON.stringify({ ID: $('#selectedGridCell').val() })
                    , type: 'POST'
                    , contentType: 'application/json'
                    , success: function (content) 
                    {
                    
                         if(content == "success")
                         {
                         
                             gviewTest.tbody.find("tr:eq(" + $('#hidRowIndex').val() + ") td:nth-child(" + delColID + ")").removeClass("note");

                             WinNotificationAlert()

                             callRemarksBox(false)
                         
                         }
                    }
    
          });
    
    });


     function WinNotificationAlert()
     {
         var winNotification = $("#winNotification").kendoWindow({
            width: 300,
            height: 100,
            visible: false,
            modal: true,
            resizable: false
        });


          winNotification.data("kendoWindow").center().open();
     }


         function getUserAcess() 
         {

            var account = $('#hidCurrUser').val();

             $.ajax({

                 url: '/Grid/GetUserAcess/'
                        , data: JSON.stringify({ userAccount: account })
                        , type: 'POST'
                        , contentType: 'application/json'
                        , success: function (content) 
                        {
                        
                            var ua = content.UserAcess.toString()
  
                            if(ua.toLowerCase() == "admin" || ua.toLowerCase() == "admintest")
                            {
                        
                                // $('#save').hide();

                                 callRemarksBox(true);
                            
                            }
                        
                            else 
                            {

                           //  $('#save').show()
                              callRemarksBox(false);
                            }
                        
                        }
             });
           
         }

         function getAssyUserAcess() 
         {

            var account = $('#hidCurrUser').val();

             $.ajax({

                 url: '/Grid/GetUserAcess/'
                        , data: JSON.stringify({ userAccount: account })
                        , type: 'POST'
                        , contentType: 'application/json'
                        , success: function (content) 
                        {
                        
                            var ua = content.UserAcess.toString()
  
                            if(ua.toLowerCase() == "admin" || ua.toLowerCase() == "adminassy")
                            {
                        
                                // $('#save').hide();

                                 callAssyRemarksBox(true);
                            
                            }
                        
                            else 
                            {

                           //  $('#save').show()
                              callAssyRemarksBox(false);
                            }
                        
                        }
             });
           
         }



   // --------------------------------------- End Kendo Remarks ------------------------------

        // ---------------------------------------  Document Ready   -------------------------------------
        $(document).ready(function () {
            // Initialize treeview object variables
            treeviewMain = $("#treeviewMenu").data("kendoTreeView");
            treeviewMonthly = $("#treeviewMonthly").data("kendoTreeView");                           
          
           //  alertMSG("Sample");

            $("#center-pane-div").show();

            // set groupings 
            testGrouping = @Html.Raw(Json.Encode(ViewData["testgroups"]));              
            assemblyGrouping = @Html.Raw(Json.Encode(ViewData["assemblygroups"]));    

            // Get the string and convert to array
            testGroups = testGrouping.split(":");
            assemblyGroups = assemblyGrouping.split(":");

            Date.prototype.format = function (format, utc){
                return formatDate(this, format, utc);
            };

            // Resize splitter bars
            resizeSplitter();
            resizeGrid("#gridTestOutput");
            resizeGrid("#gridTestYield");
            resizeGrid("#gridAssyOutput3001");  
            resizeGrid("#gridAssyOutput3995");            
            resizeGrid("#gridAssyOutput6000"); 
            resizeGrid("#gridOutsPClass");
            resizeGrid("#gridOutsPGroups"); 
            resizeGrid("#gridFGClass");  
            resizeGrid("#gridFGGroups"); 
            resizeGrid("#gridEquipUtilClass");
            resizeGrid("#gridEquipUtilGroups");   
            resizeGrid("#gridINV");
            resizeGrid("#gridInvStocksParent");                           
            resizeGrid("#gridWIPClass");        
            resizeGrid("#gridWIPGroups");
            resizeGrid("#gridAssyWip");  
            resizeGrid("#gridFGInventory");    
            resizeGrid("#gridAsmbldGoodsInv");        
            
            resizeGrid("#gridOutsMonthClass");
            resizeGrid("#gridOutsMonthGroups"); 
            resizeGrid("#gridFgMonthClass");  
            resizeGrid("#gridFgMonthGroups"); 
            resizeGrid("#gridEUMonthClass");
            resizeGrid("#gridEUMonthGroups");          

            // Initilaize splitter panes and hide center-pane.
            toggleCenterPane(false);

            $("#tab1Test").hide();
            $("#tab2Test").hide();
            $("#tab3Test").hide();
            $("#tab4Test").hide();
            $("#tab5Assy").hide(); 
            $("#tab6Test").hide();   
            $("#tab7Assy").hide();                       

            $("#gridOutsPClass").hide();
            $("#gridOutsPGroups").hide();
            $("#gridFGGroups").hide();
            $("#gridFGPClass").hide();
            $("#gridFGBalGroups").hide();
            $("#gridFGBalClass").hide();                          

            //default selected
            $("#fullpath").html(treeviewMain.text(treeviewMain.select()));      
            
           
                
        });

    </script>
    <script id="client-template_OutsCClass" type="text/x-kendo-template">
                                                                                   
            @(Html.Kendo()
                .Grid<ProductionDashboard.Models.outsTestTransposeWorkShiftWTDChildClass>()
                .Name("gridOuts_#=OpClass#")
                .Columns(columns =>
                {
                    columns.Bound(p => p.OpClass).Visible(false);
                    columns.Bound(p => p.Operations).Visible(false);
                    columns.Bound(p => p.WorkWeek).Visible(false);
                    columns.Bound(p => p.WorkShift)
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                    columns.Bound(p => p.TotalQty)
                            .ClientTemplate("\\#= (TotalQty == 0) ? '' : kendo.format('{0:N0}', TotalQty/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            ;
                    columns.Bound(p => p.Saturday)
                            .ClientTemplate("\\#= (Saturday == 0) ? '' : kendo.format('{0:N0}', Saturday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Sat")
                            .Format("{0:N0}")
                            ;
                    columns.Bound(p => p.Sunday)
                            .ClientTemplate("\\#= (Sunday == 0) ? '' : kendo.format('{0:N0}', Sunday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Sun")
                            .Format("{0:N0}")
                            ;
                    columns.Bound(p => p.Monday)
                            .ClientTemplate("\\#= (Monday == 0) ? '' : kendo.format('{0:N0}', Monday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Mon")
                            .Format("{0:N0}")
                            ;
                    columns.Bound(p => p.Tuesday)
                            .ClientTemplate("\\#= (Tuesday == 0) ? '' : kendo.format('{0:N0}', Tuesday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Tue")
                            .Format("{0:N0}")
                            ;
                    columns.Bound(p => p.Wednesday)
                            .ClientTemplate("\\#= (Wednesday == 0) ? '' : kendo.format('{0:N0}', Wednesday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Wed")
                            .Format("{0:N0}")
                            ;
                    columns.Bound(p => p.Thursday)
                            .ClientTemplate("\\#= (Thursday == 0) ? '' : kendo.format('{0:N0}', Thursday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Thu")
                            .Format("{0:N0}")
                            ;
                    columns.Bound(p => p.Friday)
                            .ClientTemplate("\\#= (Friday == 0) ? '' : kendo.format('{0:N0}', Friday/1000) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Fri")
                            .Format("{0:N0}")
                            ;

                })
                .Sortable()
                .Scrollable()
                .DataSource(dataSource => dataSource
                            .Ajax()
                            .Read(read => read.Action("OutsSummaryWorkShift_Read", "Grid", new { id = "#=OpClass#" })))
                .HtmlAttributes(new { style = "height:100px;" })
                .ToClientTemplate()
            )
          
    </script>

    <script id="client-template_wipChildren" type="text/x-kendo-template">
    
             @(Html.Kendo()
            .Grid<ProductionDashboard.Models.invChild>()
            .Name("gridINV_#=Connector#")
            .Columns(columns =>
            {

                columns.Bound(p => p.Connector).Visible(false);

                columns.Bound(p => p.PackageGroup2)
                        .ClientGroupHeaderTemplate("\\#=value\\#")
                        .Visible(true).Hidden(true)
                        ;

                columns.Bound(p => p.PackageGroup3)
                       .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                       .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                       .Width(200)
                       .ClientGroupFooterTemplate("Sub Total : ")
                       .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" });

                columns.Bound(p => p.Qty)
                        .ClientTemplate("\\#= (Qty == 0) ? '' : kendo.format('{0:N0}', Qty/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: left; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                        .Width(700)
                        .ClientGroupFooterTemplate("\\#= kendo.format('{0:N0}', sum/1000) \\#")
                        .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                        ;

            })

            .HtmlAttributes(new { style = "height:100%;" })
            .Sortable()
            .Scrollable()
            .DataSource(dataSource => dataSource
                        .Ajax()
                        .Aggregates(aggregates => aggregates.Add(p => p.Qty).Sum())
                        .Group(g => g.Add(p => p.PackageGroup2))
                        .Read(read => read.Action("DashBoardInvChildren_Read", "Grid", new { wipParentConnector = "#=Connector#" })))
            .Events(ev => ev.DataBound("removeNA"))
            .ToClientTemplate()

            )
    </script>
    
    <script id="client-template_invStocksChild" type="text/x-kendo-template">
    
             @(Html.Kendo()
            .Grid<ProductionDashboard.Models.invStocksProductGroupChildNEW>()
            .Name("gridInvStocksParent_#=Connector#")
            .Columns(columns =>
            {

                columns.Bound(p => p.Connector).Visible(false);

                columns.Bound(p => p.PackageGroup2)
                        .ClientGroupHeaderTemplate("\\#=value\\#")
                        .Visible(true).Hidden(true)
                        ;

                columns.Bound(p => p.PackageGroup3)
                       .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                       .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                       .Width(200)
                       .ClientGroupFooterTemplate("Sub Total : ")
                       .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" });

                columns.Bound(p => p.Qty)
                        .ClientTemplate("\\#= (Qty == 0) ? '' : kendo.format('{0:N0}', Qty/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: left; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: left; font-weight:bold; font-size:small;" })
                        .Width(700)
                        .ClientGroupFooterTemplate("\\#= kendo.format('{0:N0}', sum/1000) \\#")
                        .FooterHtmlAttributes(new { style = "text-align: left; font-weight: bold; font-size:small;" })
                        ;

            })

            .HtmlAttributes(new { style = "height:100%;" })
            .Sortable()
            .Scrollable()
            .DataSource(dataSource => dataSource
                        .Ajax()
                        .Aggregates(aggregates => aggregates.Add(p => p.Qty).Sum())
                        .Group(g => g.Add(p => p.PackageGroup2))
                        .Read(read => read.Action("DashBoardInvStocksChildren_Read", "Grid", new { invStocksParentConnector = "#=Connector#" })))
            .Events(ev => ev.DataBound("removeNA"))
            .ToClientTemplate()

            )
    </script>

    <script id="client-template_OutsCGroups" type="text/x-kendo-template">

            @(Html.Kendo()
            .Grid<ProductionDashboard.Models.outsTestTransposeWorkShiftWTDChildGroup>()
            .Name("gridOutsG_#=OpGroups#")
            .Columns(columns =>
            {
                columns.Bound(p => p.OpGroups).Visible(false);
                columns.Bound(p => p.Operations).Visible(false);
                columns.Bound(p => p.WorkWeek).Visible(false);
                columns.Bound(p => p.WorkShift)
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" });
                columns.Bound(p => p.TotalQty)
                        .ClientTemplate("\\#= (TotalQty == 0) ? '' : kendo.format('{0:N0}', TotalQty/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        ;
                columns.Bound(p => p.Saturday)
                        .ClientTemplate("\\#= (Saturday == 0) ? '' : kendo.format('{0:N0}', Saturday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Sat")
                        .Format("{0:N0}")
                        ;
                columns.Bound(p => p.Sunday)
                        .ClientTemplate("\\#= (Sunday == 0) ? '' : kendo.format('{0:N0}', Sunday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Sun")
                        .Format("{0:N0}")
                        ;
                columns.Bound(p => p.Monday)
                        .ClientTemplate("\\#= (Monday == 0) ? '' : kendo.format('{0:N0}', Monday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Mon")
                        .Format("{0:N0}")
                        ;
                columns.Bound(p => p.Tuesday)
                        .ClientTemplate("\\#= (Tuesday == 0) ? '' : kendo.format('{0:N0}', Tuesday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Tue")
                        .Format("{0:N0}")
                        ;
                columns.Bound(p => p.Wednesday)
                        .ClientTemplate("\\#= (Wednesday == 0) ? '' : kendo.format('{0:N0}', Wednesday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Wed")
                        .Format("{0:N0}")
                        ;
                columns.Bound(p => p.Thursday)
                        .ClientTemplate("\\#= (Thursday == 0) ? '' : kendo.format('{0:N0}', Thursday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Thu")
                        .Format("{0:N0}")
                        ;
                columns.Bound(p => p.Friday)
                        .ClientTemplate("\\#= (Friday == 0) ? '' : kendo.format('{0:N0}', Friday/1000) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Fri")
                        .Format("{0:N0}")
                        ;
            })
            .HtmlAttributes(new { style = "height:100px;" })
            .Sortable()
            .Scrollable()
            .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("OutsSummaryWorkShiftGroups_Read", "Grid", new { id = "#=OpGroups#" })))
            .ToClientTemplate()
        )
      
    </script>
    <script id="client-template_EUClass" type="text/x-kendo-template">

                @(Html.Kendo()
                .Grid<ProductionDashboard.Models.equipUtilTransposeWorkShiftWTDChildClass>()
                .Name("gridEquipUtilClass_#=EquipClass#")
                .Columns(columns =>
                {
                    columns.Bound(p => p.EquipClass).Visible(false);
                    columns.Bound(p => p.EquipmentPackageFamily).Visible(false);
                    columns.Bound(p => p.EquipmentFamily).Visible(false);
                    columns.Bound(p => p.Equipment).Visible(false);
                    columns.Bound(p => p.WorkWeek).Visible(false);
                    columns.Bound(p => p.WorkShift)
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        ;
                    columns.Bound(p => p.Target)
                        .ClientTemplate("\\#= kendo.format('{0:P2}', Target) \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" })
                        ;
                    columns.Bound(p => p.TotalHours)
                        .ClientTemplate("\\# if (TotalHours > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', TotalHours) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', TotalHours) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("WTD")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Saturday)
                        .ClientTemplate("\\# if (Saturday > Target ) { \\#" +
                           "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Saturday) \\#</strong>" +
                           "\\# } else { \\#" +
                           "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Saturday) \\#</strong>" +
                           "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Sat")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Sunday)
                        .ClientTemplate("\\# if (Sunday > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Sunday) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Sunday) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Sun")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Monday)
                        .ClientTemplate("\\# if (Monday > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Monday) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Monday) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Mon")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Tuesday)
                        .ClientTemplate("\\# if (Tuesday > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Tuesday) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Tuesday) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Tue")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Wednesday)
                        .ClientTemplate("\\# if (Wednesday > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Wednesday) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Wednesday) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Wed")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Thursday)
                        .ClientTemplate("\\# if (Thursday > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Thursday) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Thursday) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Thu")
                        .Format("{0:P2}")
                        ;
                    columns.Bound(p => p.Friday)
                        .ClientTemplate("\\# if (Friday > Target ) { \\#" +
                        "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Friday) \\#</strong>" +
                        "\\# } else { \\#" +
                        "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Friday) \\#</strong>" +
                        "\\# } \\#")
                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                        .Title("Fri")
                        .Format("{0:P2}")
                        ;
                })
                .HtmlAttributes(new { style = "height:100px;" })
                .Sortable()
                .Scrollable()
                .DataSource(dataSource => dataSource
                            .Ajax()
                            .Read(read => read.Action("EquipUtilSummaryWorkShiftClass_Read", "Grid", new { id = "#=EquipClass#" })))
                .ToClientTemplate()
                  )
      
    </script>
    <script id="client-template_EUGroups" type="text/x-kendo-template">
          
                @(Html.Kendo()
                    .Grid<ProductionDashboard.Models.equipUtilTransposeWorkShiftWTDChildGroup>()
                    .Name("gridEquipUtilGroups_#=EquipGroups#")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.EquipGroups).Visible(false);
                        columns.Bound(p => p.EquipmentPackageFamily).Visible(false);
                        columns.Bound(p => p.EquipmentFamily).Visible(false);
                        columns.Bound(p => p.Equipment).Visible(false);
                        columns.Bound(p => p.WorkWeek).Visible(false);
                        columns.Bound(p => p.WorkShift)
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            ;
                        columns.Bound(p => p.Target)
                            .ClientTemplate("\\#= kendo.format('{0:P2}', Target) \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; color: Blue; font-size:small;" })
                            ;
                        columns.Bound(p => p.TotalHours)
                            .ClientTemplate("\\# if (TotalHours > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', TotalHours) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', TotalHours) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("WTD")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Saturday)
                            .ClientTemplate("\\# if (Saturday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Saturday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Saturday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Sat")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Sunday)
                            .ClientTemplate("\\# if (Sunday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Sunday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Sunday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Sun")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Monday)
                            .ClientTemplate("\\# if (Monday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Monday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Monday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Mon")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Tuesday)
                            .ClientTemplate("\\# if (Tuesday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Tuesday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Tuesday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Tue")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Wednesday)
                            .ClientTemplate("\\# if (Wednesday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Wednesday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Wednesday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Wed")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Thursday)
                            .ClientTemplate("\\# if (Thursday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Thursday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Thursday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Thu")
                            .Format("{0:P2}")
                            ;
                        columns.Bound(p => p.Friday)
                            .ClientTemplate("\\# if (Friday > Target ) { \\#" +
                            "<strong style='color: limegreen'>\\#: kendo.format('{0:p2}', Friday) \\#</strong>" +
                            "\\# } else { \\#" +
                            "<strong style='color: Red'><strong>\\#: kendo.format('{0:p2}', Friday) \\#</strong>" +
                            "\\# } \\#")
                            .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                            .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                            .Title("Fri")
                            .Format("{0:P2}")
                            ;
                    })
                    .HtmlAttributes(new { style = "height:100px;" })
                    .Sortable()
                    .Scrollable()
                    .DataSource(dataSource => dataSource
                              .Ajax()
                              .Read(read => read.Action("EquipUtilSummaryWorkShiftGroups_Read", "Grid", new { id = "#=EquipGroups#" })))
                    .ToClientTemplate()
                  )   
 </script>

  <script id="template" type="text/x-kendo-template">  
         
              <p><input type='text' id='aa' /></p>
              
              <p style='font-size: small; color: blue; text-decoration: underline'>View Old Remarks<p>

  </script>
   

       <script src="../../Scripts/configuration.js" type="text/javascript"></script>
       
       <script type="text/javascript">
           /*
           * author       :   Alvin <aabasolo@ALLEGROMICRO.COM>
           * date         :   8-3-2016 7:58AM
           * description  :   redirect to new yield report made in ssrs
           */
           $(document).delegate('.k-grid-CustomizedYieldReport', 'click', function () {
               var win = window.open("http://ampicamtestodb1/Reports_TEST/Pages/Report.aspx?ItemPath=%2fCAMSTAR_REPORTS_PROD%2fDashboard+Reports%2fDASHBOARD_TEST_YIELD", '_blank');
               win.focus();
           });
       </script>
   
</body>
</html>
